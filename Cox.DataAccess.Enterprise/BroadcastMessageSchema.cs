//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Cox.DataAccess.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class BroadcastMessageSchema : DataSet {
        
        private BroadcastMessageDataTable tableBroadcastMessage;
        
        public BroadcastMessageSchema() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected BroadcastMessageSchema(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BroadcastMessage"] != null)) {
                    this.Tables.Add(new BroadcastMessageDataTable(ds.Tables["BroadcastMessage"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BroadcastMessageDataTable BroadcastMessage {
            get {
                return this.tableBroadcastMessage;
            }
        }
        
        public override DataSet Clone() {
            BroadcastMessageSchema cln = ((BroadcastMessageSchema)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["BroadcastMessage"] != null)) {
                this.Tables.Add(new BroadcastMessageDataTable(ds.Tables["BroadcastMessage"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableBroadcastMessage = ((BroadcastMessageDataTable)(this.Tables["BroadcastMessage"]));
            if ((this.tableBroadcastMessage != null)) {
                this.tableBroadcastMessage.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "BroadcastMessageSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BroadcastMessageSchema.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableBroadcastMessage = new BroadcastMessageDataTable();
            this.Tables.Add(this.tableBroadcastMessage);
        }
        
        private bool ShouldSerializeBroadcastMessage() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void BroadcastMessageRowChangeEventHandler(object sender, BroadcastMessageRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BroadcastMessageDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBroadcastMessageId;
            
            private DataColumn columnApplicationTypeId;
            
            private DataColumn columnChannelId;
            
            private DataColumn columnAuthorizationUserId;
            
            private DataColumn columnStartDate;
            
            private DataColumn columnEndDate;
            
            private DataColumn columnCreateDate;
            
            private DataColumn columnValue;
            
            private DataColumn columnLogin;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnMiddleName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnEmailAddress;
            
            internal BroadcastMessageDataTable() : 
                    base("BroadcastMessage") {
                this.InitClass();
            }
            
            internal BroadcastMessageDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BroadcastMessageIdColumn {
                get {
                    return this.columnBroadcastMessageId;
                }
            }
            
            internal DataColumn ApplicationTypeIdColumn {
                get {
                    return this.columnApplicationTypeId;
                }
            }
            
            internal DataColumn ChannelIdColumn {
                get {
                    return this.columnChannelId;
                }
            }
            
            internal DataColumn AuthorizationUserIdColumn {
                get {
                    return this.columnAuthorizationUserId;
                }
            }
            
            internal DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            internal DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            internal DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn LoginColumn {
                get {
                    return this.columnLogin;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn MiddleNameColumn {
                get {
                    return this.columnMiddleName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn EmailAddressColumn {
                get {
                    return this.columnEmailAddress;
                }
            }
            
            public BroadcastMessageRow this[int index] {
                get {
                    return ((BroadcastMessageRow)(this.Rows[index]));
                }
            }
            
            public event BroadcastMessageRowChangeEventHandler BroadcastMessageRowChanged;
            
            public event BroadcastMessageRowChangeEventHandler BroadcastMessageRowChanging;
            
            public event BroadcastMessageRowChangeEventHandler BroadcastMessageRowDeleted;
            
            public event BroadcastMessageRowChangeEventHandler BroadcastMessageRowDeleting;
            
            public void AddBroadcastMessageRow(BroadcastMessageRow row) {
                this.Rows.Add(row);
            }
            
            public BroadcastMessageRow AddBroadcastMessageRow(int ApplicationTypeId, int ChannelId, int AuthorizationUserId, System.DateTime StartDate, System.DateTime EndDate, System.DateTime CreateDate, string Value, string Login, string FirstName, string MiddleName, string LastName, string EmailAddress) {
                BroadcastMessageRow rowBroadcastMessageRow = ((BroadcastMessageRow)(this.NewRow()));
                rowBroadcastMessageRow.ItemArray = new object[] {
                        null,
                        ApplicationTypeId,
                        ChannelId,
                        AuthorizationUserId,
                        StartDate,
                        EndDate,
                        CreateDate,
                        Value,
                        Login,
                        FirstName,
                        MiddleName,
                        LastName,
                        EmailAddress};
                this.Rows.Add(rowBroadcastMessageRow);
                return rowBroadcastMessageRow;
            }
            
            public BroadcastMessageRow FindByBroadcastMessageId(int BroadcastMessageId) {
                return ((BroadcastMessageRow)(this.Rows.Find(new object[] {
                            BroadcastMessageId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BroadcastMessageDataTable cln = ((BroadcastMessageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BroadcastMessageDataTable();
            }
            
            internal void InitVars() {
                this.columnBroadcastMessageId = this.Columns["BroadcastMessageId"];
                this.columnApplicationTypeId = this.Columns["ApplicationTypeId"];
                this.columnChannelId = this.Columns["ChannelId"];
                this.columnAuthorizationUserId = this.Columns["AuthorizationUserId"];
                this.columnStartDate = this.Columns["StartDate"];
                this.columnEndDate = this.Columns["EndDate"];
                this.columnCreateDate = this.Columns["CreateDate"];
                this.columnValue = this.Columns["Value"];
                this.columnLogin = this.Columns["Login"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnMiddleName = this.Columns["MiddleName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnEmailAddress = this.Columns["EmailAddress"];
            }
            
            private void InitClass() {
                this.columnBroadcastMessageId = new DataColumn("BroadcastMessageId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBroadcastMessageId);
                this.columnApplicationTypeId = new DataColumn("ApplicationTypeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplicationTypeId);
                this.columnChannelId = new DataColumn("ChannelId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChannelId);
                this.columnAuthorizationUserId = new DataColumn("AuthorizationUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAuthorizationUserId);
                this.columnStartDate = new DataColumn("StartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartDate);
                this.columnEndDate = new DataColumn("EndDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEndDate);
                this.columnCreateDate = new DataColumn("CreateDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreateDate);
                this.columnValue = new DataColumn("Value", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.columnLogin = new DataColumn("Login", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLogin);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnMiddleName = new DataColumn("MiddleName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMiddleName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnEmailAddress = new DataColumn("EmailAddress", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailAddress);
                this.Constraints.Add(new UniqueConstraint("BroadcastMessageSchemaKey1", new DataColumn[] {
                                this.columnBroadcastMessageId}, true));
                this.columnBroadcastMessageId.AutoIncrement = true;
                this.columnBroadcastMessageId.AllowDBNull = false;
                this.columnBroadcastMessageId.ReadOnly = true;
                this.columnBroadcastMessageId.Unique = true;
                this.columnApplicationTypeId.AllowDBNull = false;
                this.columnChannelId.AllowDBNull = false;
                this.columnAuthorizationUserId.AllowDBNull = false;
                this.columnCreateDate.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
                this.columnLogin.AllowDBNull = false;
                this.columnFirstName.AllowDBNull = false;
                this.columnLastName.AllowDBNull = false;
                this.columnEmailAddress.AllowDBNull = false;
            }
            
            public BroadcastMessageRow NewBroadcastMessageRow() {
                return ((BroadcastMessageRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BroadcastMessageRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BroadcastMessageRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BroadcastMessageRowChanged != null)) {
                    this.BroadcastMessageRowChanged(this, new BroadcastMessageRowChangeEvent(((BroadcastMessageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BroadcastMessageRowChanging != null)) {
                    this.BroadcastMessageRowChanging(this, new BroadcastMessageRowChangeEvent(((BroadcastMessageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BroadcastMessageRowDeleted != null)) {
                    this.BroadcastMessageRowDeleted(this, new BroadcastMessageRowChangeEvent(((BroadcastMessageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BroadcastMessageRowDeleting != null)) {
                    this.BroadcastMessageRowDeleting(this, new BroadcastMessageRowChangeEvent(((BroadcastMessageRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBroadcastMessageRow(BroadcastMessageRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BroadcastMessageRow : DataRow {
            
            private BroadcastMessageDataTable tableBroadcastMessage;
            
            internal BroadcastMessageRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBroadcastMessage = ((BroadcastMessageDataTable)(this.Table));
            }
            
            public int BroadcastMessageId {
                get {
                    return ((int)(this[this.tableBroadcastMessage.BroadcastMessageIdColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.BroadcastMessageIdColumn] = value;
                }
            }
            
            public int ApplicationTypeId {
                get {
                    return ((int)(this[this.tableBroadcastMessage.ApplicationTypeIdColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.ApplicationTypeIdColumn] = value;
                }
            }
            
            public int ChannelId {
                get {
                    return ((int)(this[this.tableBroadcastMessage.ChannelIdColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.ChannelIdColumn] = value;
                }
            }
            
            public int AuthorizationUserId {
                get {
                    return ((int)(this[this.tableBroadcastMessage.AuthorizationUserIdColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.AuthorizationUserIdColumn] = value;
                }
            }
            
            public System.DateTime StartDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBroadcastMessage.StartDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBroadcastMessage.StartDateColumn] = value;
                }
            }
            
            public System.DateTime EndDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBroadcastMessage.EndDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBroadcastMessage.EndDateColumn] = value;
                }
            }
            
            public System.DateTime CreateDate {
                get {
                    return ((System.DateTime)(this[this.tableBroadcastMessage.CreateDateColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.CreateDateColumn] = value;
                }
            }
            
            public string Value {
                get {
                    return ((string)(this[this.tableBroadcastMessage.ValueColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.ValueColumn] = value;
                }
            }
            
            public string Login {
                get {
                    return ((string)(this[this.tableBroadcastMessage.LoginColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.LoginColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    return ((string)(this[this.tableBroadcastMessage.FirstNameColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.FirstNameColumn] = value;
                }
            }
            
            public string MiddleName {
                get {
                    try {
                        return ((string)(this[this.tableBroadcastMessage.MiddleNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBroadcastMessage.MiddleNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    return ((string)(this[this.tableBroadcastMessage.LastNameColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.LastNameColumn] = value;
                }
            }
            
            public string EmailAddress {
                get {
                    return ((string)(this[this.tableBroadcastMessage.EmailAddressColumn]));
                }
                set {
                    this[this.tableBroadcastMessage.EmailAddressColumn] = value;
                }
            }
            
            public bool IsStartDateNull() {
                return this.IsNull(this.tableBroadcastMessage.StartDateColumn);
            }
            
            public void SetStartDateNull() {
                this[this.tableBroadcastMessage.StartDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndDateNull() {
                return this.IsNull(this.tableBroadcastMessage.EndDateColumn);
            }
            
            public void SetEndDateNull() {
                this[this.tableBroadcastMessage.EndDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsMiddleNameNull() {
                return this.IsNull(this.tableBroadcastMessage.MiddleNameColumn);
            }
            
            public void SetMiddleNameNull() {
                this[this.tableBroadcastMessage.MiddleNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BroadcastMessageRowChangeEvent : EventArgs {
            
            private BroadcastMessageRow eventRow;
            
            private DataRowAction eventAction;
            
            public BroadcastMessageRowChangeEvent(BroadcastMessageRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BroadcastMessageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
