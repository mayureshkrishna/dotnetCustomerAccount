//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Cox.DataAccess.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class FranchiseSchema : DataSet {
        
        private FranchisesDataTable tableFranchises;
        
        public FranchiseSchema() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected FranchiseSchema(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Franchise"] != null)) {
                    this.Tables.Add(new FranchisesDataTable(ds.Tables["Franchise"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FranchisesDataTable Franchises {
            get {
                return this.tableFranchises;
            }
        }
        
        public override DataSet Clone() {
            FranchiseSchema cln = ((FranchiseSchema)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Franchise"] != null)) {
                this.Tables.Add(new FranchisesDataTable(ds.Tables["Franchise"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFranchises = ((FranchisesDataTable)(this.Tables["Franchise"]));
            if ((this.tableFranchises != null)) {
                this.tableFranchises.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "FranchiseSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FranchiseSchema.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFranchises = new FranchisesDataTable();
            this.Tables.Add(this.tableFranchises);
        }
        
        private bool ShouldSerializeFranchises() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FranchiseChangeEventHandler(object sender, FranchiseChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FranchisesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFranchiseId;
            
            private DataColumn columnFranchiseGroupId;
            
            private DataColumn columnFranchiseGroupName;
            
            private DataColumn columnSiteId;
            
            internal FranchisesDataTable() : 
                    base("Franchise") {
                this.InitClass();
            }
            
            internal FranchisesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FranchiseIdColumn {
                get {
                    return this.columnFranchiseId;
                }
            }
            
            internal DataColumn FranchiseGroupIdColumn {
                get {
                    return this.columnFranchiseGroupId;
                }
            }
            
            internal DataColumn FranchiseGroupNameColumn {
                get {
                    return this.columnFranchiseGroupName;
                }
            }
            
            internal DataColumn SiteIdColumn {
                get {
                    return this.columnSiteId;
                }
            }
            
            public Franchise this[int index] {
                get {
                    return ((Franchise)(this.Rows[index]));
                }
            }
            
            public event FranchiseChangeEventHandler FranchiseChanged;
            
            public event FranchiseChangeEventHandler FranchiseChanging;
            
            public event FranchiseChangeEventHandler FranchiseDeleted;
            
            public event FranchiseChangeEventHandler FranchiseDeleting;
            
            public void AddFranchise(Franchise row) {
                this.Rows.Add(row);
            }
            
            public Franchise AddFranchise(int FranchiseId, int FranchiseGroupId, string FranchiseGroupName, int SiteId) {
                Franchise rowFranchise = ((Franchise)(this.NewRow()));
                rowFranchise.ItemArray = new object[] {
                        FranchiseId,
                        FranchiseGroupId,
                        FranchiseGroupName,
                        SiteId};
                this.Rows.Add(rowFranchise);
                return rowFranchise;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FranchisesDataTable cln = ((FranchisesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FranchisesDataTable();
            }
            
            internal void InitVars() {
                this.columnFranchiseId = this.Columns["FranchiseId"];
                this.columnFranchiseGroupId = this.Columns["FranchiseGroupId"];
                this.columnFranchiseGroupName = this.Columns["FranchiseGroupName"];
                this.columnSiteId = this.Columns["SiteId"];
            }
            
            private void InitClass() {
                this.columnFranchiseId = new DataColumn("FranchiseId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFranchiseId);
                this.columnFranchiseGroupId = new DataColumn("FranchiseGroupId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFranchiseGroupId);
                this.columnFranchiseGroupName = new DataColumn("FranchiseGroupName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFranchiseGroupName);
                this.columnSiteId = new DataColumn("SiteId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSiteId);
            }
            
            public Franchise NewFranchise() {
                return ((Franchise)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Franchise(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Franchise);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FranchiseChanged != null)) {
                    this.FranchiseChanged(this, new FranchiseChangeEvent(((Franchise)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FranchiseChanging != null)) {
                    this.FranchiseChanging(this, new FranchiseChangeEvent(((Franchise)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FranchiseDeleted != null)) {
                    this.FranchiseDeleted(this, new FranchiseChangeEvent(((Franchise)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FranchiseDeleting != null)) {
                    this.FranchiseDeleting(this, new FranchiseChangeEvent(((Franchise)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFranchise(Franchise row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Franchise : DataRow {
            
            private FranchisesDataTable tableFranchises;
            
            internal Franchise(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFranchises = ((FranchisesDataTable)(this.Table));
            }
            
            public int FranchiseId {
                get {
                    try {
                        return ((int)(this[this.tableFranchises.FranchiseIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFranchises.FranchiseIdColumn] = value;
                }
            }
            
            public int FranchiseGroupId {
                get {
                    try {
                        return ((int)(this[this.tableFranchises.FranchiseGroupIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFranchises.FranchiseGroupIdColumn] = value;
                }
            }
            
            public string FranchiseGroupName {
                get {
                    try {
                        return ((string)(this[this.tableFranchises.FranchiseGroupNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFranchises.FranchiseGroupNameColumn] = value;
                }
            }
            
            public int SiteId {
                get {
                    try {
                        return ((int)(this[this.tableFranchises.SiteIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFranchises.SiteIdColumn] = value;
                }
            }
            
            public bool IsFranchiseIdNull() {
                return this.IsNull(this.tableFranchises.FranchiseIdColumn);
            }
            
            public void SetFranchiseIdNull() {
                this[this.tableFranchises.FranchiseIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsFranchiseGroupIdNull() {
                return this.IsNull(this.tableFranchises.FranchiseGroupIdColumn);
            }
            
            public void SetFranchiseGroupIdNull() {
                this[this.tableFranchises.FranchiseGroupIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsFranchiseGroupNameNull() {
                return this.IsNull(this.tableFranchises.FranchiseGroupNameColumn);
            }
            
            public void SetFranchiseGroupNameNull() {
                this[this.tableFranchises.FranchiseGroupNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsSiteIdNull() {
                return this.IsNull(this.tableFranchises.SiteIdColumn);
            }
            
            public void SetSiteIdNull() {
                this[this.tableFranchises.SiteIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FranchiseChangeEvent : EventArgs {
            
            private Franchise eventRow;
            
            private DataRowAction eventAction;
            
            public FranchiseChangeEvent(Franchise row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Franchise Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
