//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Cox.DataAccess.Enterprise {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ConfigurationEnvironmentSchema")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ConfigurationEnvironmentSchema : System.Data.DataSet {
        
        private ConfigurationEnvironmentDataTable tableConfigurationEnvironment;
        
        private ConfigurationHierarchyDataTable tableConfigurationHierarchy;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConfigurationEnvironmentSchema() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ConfigurationEnvironmentSchema(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ConfigurationEnvironment"] != null)) {
                    base.Tables.Add(new ConfigurationEnvironmentDataTable(ds.Tables["ConfigurationEnvironment"]));
                }
                if ((ds.Tables["ConfigurationHierarchy"] != null)) {
                    base.Tables.Add(new ConfigurationHierarchyDataTable(ds.Tables["ConfigurationHierarchy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConfigurationEnvironmentDataTable ConfigurationEnvironment {
            get {
                return this.tableConfigurationEnvironment;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConfigurationHierarchyDataTable ConfigurationHierarchy {
            get {
                return this.tableConfigurationHierarchy;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ConfigurationEnvironmentSchema cln = ((ConfigurationEnvironmentSchema)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ConfigurationEnvironment"] != null)) {
                    base.Tables.Add(new ConfigurationEnvironmentDataTable(ds.Tables["ConfigurationEnvironment"]));
                }
                if ((ds.Tables["ConfigurationHierarchy"] != null)) {
                    base.Tables.Add(new ConfigurationHierarchyDataTable(ds.Tables["ConfigurationHierarchy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableConfigurationEnvironment = ((ConfigurationEnvironmentDataTable)(base.Tables["ConfigurationEnvironment"]));
            if ((initTable == true)) {
                if ((this.tableConfigurationEnvironment != null)) {
                    this.tableConfigurationEnvironment.InitVars();
                }
            }
            this.tableConfigurationHierarchy = ((ConfigurationHierarchyDataTable)(base.Tables["ConfigurationHierarchy"]));
            if ((initTable == true)) {
                if ((this.tableConfigurationHierarchy != null)) {
                    this.tableConfigurationHierarchy.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ConfigurationEnvironmentSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ConfigurationEnvironmentSchema.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableConfigurationEnvironment = new ConfigurationEnvironmentDataTable();
            base.Tables.Add(this.tableConfigurationEnvironment);
            this.tableConfigurationHierarchy = new ConfigurationHierarchyDataTable();
            base.Tables.Add(this.tableConfigurationHierarchy);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConfigurationEnvironment() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConfigurationHierarchy() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ConfigurationEnvironmentSchema ds = new ConfigurationEnvironmentSchema();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ConfigurationEnvironmentRowChangeEventHandler(object sender, ConfigurationEnvironmentRowChangeEvent e);
        
        public delegate void ConfigurationHierarchyRowChangeEventHandler(object sender, ConfigurationHierarchyRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConfigurationEnvironmentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnConfigurationEnvironmentId;
            
            private System.Data.DataColumn columnChannelId;
            
            private System.Data.DataColumn columnSiteId;
            
            private System.Data.DataColumn columnAuthorizationUserId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationEnvironmentDataTable() {
                this.TableName = "ConfigurationEnvironment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfigurationEnvironmentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConfigurationEnvironmentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfigurationEnvironmentIdColumn {
                get {
                    return this.columnConfigurationEnvironmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChannelIdColumn {
                get {
                    return this.columnChannelId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SiteIdColumn {
                get {
                    return this.columnSiteId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorizationUserIdColumn {
                get {
                    return this.columnAuthorizationUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationEnvironmentRow this[int index] {
                get {
                    return ((ConfigurationEnvironmentRow)(this.Rows[index]));
                }
            }
            
            public event ConfigurationEnvironmentRowChangeEventHandler ConfigurationEnvironmentRowChanging;
            
            public event ConfigurationEnvironmentRowChangeEventHandler ConfigurationEnvironmentRowChanged;
            
            public event ConfigurationEnvironmentRowChangeEventHandler ConfigurationEnvironmentRowDeleting;
            
            public event ConfigurationEnvironmentRowChangeEventHandler ConfigurationEnvironmentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConfigurationEnvironmentRow(ConfigurationEnvironmentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationEnvironmentRow AddConfigurationEnvironmentRow(int ConfigurationEnvironmentId, int ChannelId, int SiteId, int AuthorizationUserId) {
                ConfigurationEnvironmentRow rowConfigurationEnvironmentRow = ((ConfigurationEnvironmentRow)(this.NewRow()));
                rowConfigurationEnvironmentRow.ItemArray = new object[] {
                        ConfigurationEnvironmentId,
                        ChannelId,
                        SiteId,
                        AuthorizationUserId};
                this.Rows.Add(rowConfigurationEnvironmentRow);
                return rowConfigurationEnvironmentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ConfigurationEnvironmentDataTable cln = ((ConfigurationEnvironmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ConfigurationEnvironmentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConfigurationEnvironmentId = base.Columns["ConfigurationEnvironmentId"];
                this.columnChannelId = base.Columns["ChannelId"];
                this.columnSiteId = base.Columns["SiteId"];
                this.columnAuthorizationUserId = base.Columns["AuthorizationUserId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConfigurationEnvironmentId = new System.Data.DataColumn("ConfigurationEnvironmentId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigurationEnvironmentId);
                this.columnChannelId = new System.Data.DataColumn("ChannelId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannelId);
                this.columnSiteId = new System.Data.DataColumn("SiteId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteId);
                this.columnAuthorizationUserId = new System.Data.DataColumn("AuthorizationUserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorizationUserId);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationEnvironmentRow NewConfigurationEnvironmentRow() {
                return ((ConfigurationEnvironmentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ConfigurationEnvironmentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ConfigurationEnvironmentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConfigurationEnvironmentRowChanged != null)) {
                    this.ConfigurationEnvironmentRowChanged(this, new ConfigurationEnvironmentRowChangeEvent(((ConfigurationEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConfigurationEnvironmentRowChanging != null)) {
                    this.ConfigurationEnvironmentRowChanging(this, new ConfigurationEnvironmentRowChangeEvent(((ConfigurationEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConfigurationEnvironmentRowDeleted != null)) {
                    this.ConfigurationEnvironmentRowDeleted(this, new ConfigurationEnvironmentRowChangeEvent(((ConfigurationEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConfigurationEnvironmentRowDeleting != null)) {
                    this.ConfigurationEnvironmentRowDeleting(this, new ConfigurationEnvironmentRowChangeEvent(((ConfigurationEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConfigurationEnvironmentRow(ConfigurationEnvironmentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ConfigurationEnvironmentSchema ds = new ConfigurationEnvironmentSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConfigurationEnvironmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConfigurationHierarchyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnConfigurationHierarchyId;
            
            private System.Data.DataColumn columnConfigurationEnvironmentId;
            
            private System.Data.DataColumn columnHierarchyId;
            
            private System.Data.DataColumn columnHierarchyTypeId;
            
            private System.Data.DataColumn columnAffiliateId;
            
            private System.Data.DataColumn columnIsDefault;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationHierarchyDataTable() {
                this.TableName = "ConfigurationHierarchy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfigurationHierarchyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConfigurationHierarchyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfigurationHierarchyIdColumn {
                get {
                    return this.columnConfigurationHierarchyId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfigurationEnvironmentIdColumn {
                get {
                    return this.columnConfigurationEnvironmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HierarchyIdColumn {
                get {
                    return this.columnHierarchyId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HierarchyTypeIdColumn {
                get {
                    return this.columnHierarchyTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AffiliateIdColumn {
                get {
                    return this.columnAffiliateId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsDefaultColumn {
                get {
                    return this.columnIsDefault;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationHierarchyRow this[int index] {
                get {
                    return ((ConfigurationHierarchyRow)(this.Rows[index]));
                }
            }
            
            public event ConfigurationHierarchyRowChangeEventHandler ConfigurationHierarchyRowChanging;
            
            public event ConfigurationHierarchyRowChangeEventHandler ConfigurationHierarchyRowChanged;
            
            public event ConfigurationHierarchyRowChangeEventHandler ConfigurationHierarchyRowDeleting;
            
            public event ConfigurationHierarchyRowChangeEventHandler ConfigurationHierarchyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConfigurationHierarchyRow(ConfigurationHierarchyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationHierarchyRow AddConfigurationHierarchyRow(int ConfigurationHierarchyId, int ConfigurationEnvironmentId, int HierarchyId, int HierarchyTypeId, int AffiliateId, bool IsDefault) {
                ConfigurationHierarchyRow rowConfigurationHierarchyRow = ((ConfigurationHierarchyRow)(this.NewRow()));
                rowConfigurationHierarchyRow.ItemArray = new object[] {
                        ConfigurationHierarchyId,
                        ConfigurationEnvironmentId,
                        HierarchyId,
                        HierarchyTypeId,
                        AffiliateId,
                        IsDefault};
                this.Rows.Add(rowConfigurationHierarchyRow);
                return rowConfigurationHierarchyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ConfigurationHierarchyDataTable cln = ((ConfigurationHierarchyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ConfigurationHierarchyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConfigurationHierarchyId = base.Columns["ConfigurationHierarchyId"];
                this.columnConfigurationEnvironmentId = base.Columns["ConfigurationEnvironmentId"];
                this.columnHierarchyId = base.Columns["HierarchyId"];
                this.columnHierarchyTypeId = base.Columns["HierarchyTypeId"];
                this.columnAffiliateId = base.Columns["AffiliateId"];
                this.columnIsDefault = base.Columns["IsDefault"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConfigurationHierarchyId = new System.Data.DataColumn("ConfigurationHierarchyId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigurationHierarchyId);
                this.columnConfigurationEnvironmentId = new System.Data.DataColumn("ConfigurationEnvironmentId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigurationEnvironmentId);
                this.columnHierarchyId = new System.Data.DataColumn("HierarchyId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyId);
                this.columnHierarchyTypeId = new System.Data.DataColumn("HierarchyTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyTypeId);
                this.columnAffiliateId = new System.Data.DataColumn("AffiliateId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAffiliateId);
                this.columnIsDefault = new System.Data.DataColumn("IsDefault", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDefault);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationHierarchyRow NewConfigurationHierarchyRow() {
                return ((ConfigurationHierarchyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ConfigurationHierarchyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ConfigurationHierarchyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConfigurationHierarchyRowChanged != null)) {
                    this.ConfigurationHierarchyRowChanged(this, new ConfigurationHierarchyRowChangeEvent(((ConfigurationHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConfigurationHierarchyRowChanging != null)) {
                    this.ConfigurationHierarchyRowChanging(this, new ConfigurationHierarchyRowChangeEvent(((ConfigurationHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConfigurationHierarchyRowDeleted != null)) {
                    this.ConfigurationHierarchyRowDeleted(this, new ConfigurationHierarchyRowChangeEvent(((ConfigurationHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConfigurationHierarchyRowDeleting != null)) {
                    this.ConfigurationHierarchyRowDeleting(this, new ConfigurationHierarchyRowChangeEvent(((ConfigurationHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConfigurationHierarchyRow(ConfigurationHierarchyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ConfigurationEnvironmentSchema ds = new ConfigurationEnvironmentSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConfigurationHierarchyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConfigurationEnvironmentRow : System.Data.DataRow {
            
            private ConfigurationEnvironmentDataTable tableConfigurationEnvironment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfigurationEnvironmentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConfigurationEnvironment = ((ConfigurationEnvironmentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConfigurationEnvironmentId {
                get {
                    try {
                        return ((int)(this[this.tableConfigurationEnvironment.ConfigurationEnvironmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfigurationEnvironmentId\' in table \'ConfigurationEnvironm" +
                                "ent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurationEnvironment.ConfigurationEnvironmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChannelId {
                get {
                    try {
                        return ((int)(this[this.tableConfigurationEnvironment.ChannelIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ChannelId\' in table \'ConfigurationEnvironment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurationEnvironment.ChannelIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SiteId {
                get {
                    try {
                        return ((int)(this[this.tableConfigurationEnvironment.SiteIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SiteId\' in table \'ConfigurationEnvironment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurationEnvironment.SiteIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AuthorizationUserId {
                get {
                    try {
                        return ((int)(this[this.tableConfigurationEnvironment.AuthorizationUserIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorizationUserId\' in table \'ConfigurationEnvironment\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurationEnvironment.AuthorizationUserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfigurationEnvironmentIdNull() {
                return this.IsNull(this.tableConfigurationEnvironment.ConfigurationEnvironmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfigurationEnvironmentIdNull() {
                this[this.tableConfigurationEnvironment.ConfigurationEnvironmentIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChannelIdNull() {
                return this.IsNull(this.tableConfigurationEnvironment.ChannelIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChannelIdNull() {
                this[this.tableConfigurationEnvironment.ChannelIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteIdNull() {
                return this.IsNull(this.tableConfigurationEnvironment.SiteIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteIdNull() {
                this[this.tableConfigurationEnvironment.SiteIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorizationUserIdNull() {
                return this.IsNull(this.tableConfigurationEnvironment.AuthorizationUserIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorizationUserIdNull() {
                this[this.tableConfigurationEnvironment.AuthorizationUserIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConfigurationHierarchyRow : System.Data.DataRow {
            
            private ConfigurationHierarchyDataTable tableConfigurationHierarchy;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfigurationHierarchyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConfigurationHierarchy = ((ConfigurationHierarchyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConfigurationHierarchyId {
                get {
                    try {
                        return ((int)(this[this.tableConfigurationHierarchy.ConfigurationHierarchyIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfigurationHierarchyId\' in table \'ConfigurationHierarchy\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurationHierarchy.ConfigurationHierarchyIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConfigurationEnvironmentId {
                get {
                    try {
                        return ((int)(this[this.tableConfigurationHierarchy.ConfigurationEnvironmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfigurationEnvironmentId\' in table \'ConfigurationHierarch" +
                                "y\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurationHierarchy.ConfigurationEnvironmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HierarchyId {
                get {
                    try {
                        return ((int)(this[this.tableConfigurationHierarchy.HierarchyIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HierarchyId\' in table \'ConfigurationHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurationHierarchy.HierarchyIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HierarchyTypeId {
                get {
                    try {
                        return ((int)(this[this.tableConfigurationHierarchy.HierarchyTypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HierarchyTypeId\' in table \'ConfigurationHierarchy\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableConfigurationHierarchy.HierarchyTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AffiliateId {
                get {
                    try {
                        return ((int)(this[this.tableConfigurationHierarchy.AffiliateIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AffiliateId\' in table \'ConfigurationHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurationHierarchy.AffiliateIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefault {
                get {
                    try {
                        return ((bool)(this[this.tableConfigurationHierarchy.IsDefaultColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsDefault\' in table \'ConfigurationHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfigurationHierarchy.IsDefaultColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfigurationHierarchyIdNull() {
                return this.IsNull(this.tableConfigurationHierarchy.ConfigurationHierarchyIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfigurationHierarchyIdNull() {
                this[this.tableConfigurationHierarchy.ConfigurationHierarchyIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfigurationEnvironmentIdNull() {
                return this.IsNull(this.tableConfigurationHierarchy.ConfigurationEnvironmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfigurationEnvironmentIdNull() {
                this[this.tableConfigurationHierarchy.ConfigurationEnvironmentIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyIdNull() {
                return this.IsNull(this.tableConfigurationHierarchy.HierarchyIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyIdNull() {
                this[this.tableConfigurationHierarchy.HierarchyIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyTypeIdNull() {
                return this.IsNull(this.tableConfigurationHierarchy.HierarchyTypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyTypeIdNull() {
                this[this.tableConfigurationHierarchy.HierarchyTypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAffiliateIdNull() {
                return this.IsNull(this.tableConfigurationHierarchy.AffiliateIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAffiliateIdNull() {
                this[this.tableConfigurationHierarchy.AffiliateIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDefaultNull() {
                return this.IsNull(this.tableConfigurationHierarchy.IsDefaultColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDefaultNull() {
                this[this.tableConfigurationHierarchy.IsDefaultColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConfigurationEnvironmentRowChangeEvent : System.EventArgs {
            
            private ConfigurationEnvironmentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationEnvironmentRowChangeEvent(ConfigurationEnvironmentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationEnvironmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConfigurationHierarchyRowChangeEvent : System.EventArgs {
            
            private ConfigurationHierarchyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationHierarchyRowChangeEvent(ConfigurationHierarchyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfigurationHierarchyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591