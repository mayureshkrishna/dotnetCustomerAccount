//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Cox.DataAccess.Enterprise {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MethodOfPaymentSchema")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MethodOfPaymentSchema : System.Data.DataSet {
        
        private MethodsOfPaymentDataTable tableMethodsOfPayment;
        
        private tblApplicationGroupDataTable tabletblApplicationGroup;
        
        private tblPaymentTypeDataTable tabletblPaymentType;
        
        private System.Data.DataRelation relationtblApplicationGrouptblMethodOfPaymentMap;
        
        private System.Data.DataRelation relationtblPaymentTypetblMethodOfPaymentMap;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MethodOfPaymentSchema() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MethodOfPaymentSchema(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblMethodOfPaymentMap"] != null)) {
                    base.Tables.Add(new MethodsOfPaymentDataTable(ds.Tables["tblMethodOfPaymentMap"]));
                }
                if ((ds.Tables["tblApplicationGroup"] != null)) {
                    base.Tables.Add(new tblApplicationGroupDataTable(ds.Tables["tblApplicationGroup"]));
                }
                if ((ds.Tables["tblPaymentType"] != null)) {
                    base.Tables.Add(new tblPaymentTypeDataTable(ds.Tables["tblPaymentType"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MethodsOfPaymentDataTable MethodsOfPayment {
            get {
                return this.tableMethodsOfPayment;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblApplicationGroupDataTable tblApplicationGroup {
            get {
                return this.tabletblApplicationGroup;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblPaymentTypeDataTable tblPaymentType {
            get {
                return this.tabletblPaymentType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MethodOfPaymentSchema cln = ((MethodOfPaymentSchema)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblMethodOfPaymentMap"] != null)) {
                    base.Tables.Add(new MethodsOfPaymentDataTable(ds.Tables["tblMethodOfPaymentMap"]));
                }
                if ((ds.Tables["tblApplicationGroup"] != null)) {
                    base.Tables.Add(new tblApplicationGroupDataTable(ds.Tables["tblApplicationGroup"]));
                }
                if ((ds.Tables["tblPaymentType"] != null)) {
                    base.Tables.Add(new tblPaymentTypeDataTable(ds.Tables["tblPaymentType"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMethodsOfPayment = ((MethodsOfPaymentDataTable)(base.Tables["tblMethodOfPaymentMap"]));
            if ((initTable == true)) {
                if ((this.tableMethodsOfPayment != null)) {
                    this.tableMethodsOfPayment.InitVars();
                }
            }
            this.tabletblApplicationGroup = ((tblApplicationGroupDataTable)(base.Tables["tblApplicationGroup"]));
            if ((initTable == true)) {
                if ((this.tabletblApplicationGroup != null)) {
                    this.tabletblApplicationGroup.InitVars();
                }
            }
            this.tabletblPaymentType = ((tblPaymentTypeDataTable)(base.Tables["tblPaymentType"]));
            if ((initTable == true)) {
                if ((this.tabletblPaymentType != null)) {
                    this.tabletblPaymentType.InitVars();
                }
            }
            this.relationtblApplicationGrouptblMethodOfPaymentMap = this.Relations["tblApplicationGrouptblMethodOfPaymentMap"];
            this.relationtblPaymentTypetblMethodOfPaymentMap = this.Relations["tblPaymentTypetblMethodOfPaymentMap"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MethodOfPaymentSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MethodOfPaymentSchema.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMethodsOfPayment = new MethodsOfPaymentDataTable();
            base.Tables.Add(this.tableMethodsOfPayment);
            this.tabletblApplicationGroup = new tblApplicationGroupDataTable();
            base.Tables.Add(this.tabletblApplicationGroup);
            this.tabletblPaymentType = new tblPaymentTypeDataTable();
            base.Tables.Add(this.tabletblPaymentType);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("tblApplicationGrouptblMethodOfPaymentMap", new System.Data.DataColumn[] {
                        this.tabletblApplicationGroup.grpIdColumn}, new System.Data.DataColumn[] {
                        this.tableMethodsOfPayment.ApplicationGroupIdColumn});
            this.tableMethodsOfPayment.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("tblPaymentTypetblMethodOfPaymentMap", new System.Data.DataColumn[] {
                        this.tabletblPaymentType.paytpIDColumn}, new System.Data.DataColumn[] {
                        this.tableMethodsOfPayment.PaymentTypeIdColumn});
            this.tableMethodsOfPayment.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationtblApplicationGrouptblMethodOfPaymentMap = new System.Data.DataRelation("tblApplicationGrouptblMethodOfPaymentMap", new System.Data.DataColumn[] {
                        this.tabletblApplicationGroup.grpIdColumn}, new System.Data.DataColumn[] {
                        this.tableMethodsOfPayment.ApplicationGroupIdColumn}, false);
            this.Relations.Add(this.relationtblApplicationGrouptblMethodOfPaymentMap);
            this.relationtblPaymentTypetblMethodOfPaymentMap = new System.Data.DataRelation("tblPaymentTypetblMethodOfPaymentMap", new System.Data.DataColumn[] {
                        this.tabletblPaymentType.paytpIDColumn}, new System.Data.DataColumn[] {
                        this.tableMethodsOfPayment.PaymentTypeIdColumn}, false);
            this.Relations.Add(this.relationtblPaymentTypetblMethodOfPaymentMap);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMethodsOfPayment() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblApplicationGroup() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblPaymentType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MethodOfPaymentSchema ds = new MethodOfPaymentSchema();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void MethodOfPaymentChangeEventHandler(object sender, MethodOfPaymentChangeEvent e);
        
        public delegate void tblApplicationGroupRowChangeEventHandler(object sender, tblApplicationGroupRowChangeEvent e);
        
        public delegate void tblPaymentTypeRowChangeEventHandler(object sender, tblPaymentTypeRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MethodsOfPaymentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnPaymentTypeId;
            
            private System.Data.DataColumn columnApplicationGroupId;
            
            private System.Data.DataColumn columnMop;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MethodsOfPaymentDataTable() {
                this.TableName = "tblMethodOfPaymentMap";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MethodsOfPaymentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MethodsOfPaymentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PaymentTypeIdColumn {
                get {
                    return this.columnPaymentTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ApplicationGroupIdColumn {
                get {
                    return this.columnApplicationGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MopColumn {
                get {
                    return this.columnMop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MethodOfPayment this[int index] {
                get {
                    return ((MethodOfPayment)(this.Rows[index]));
                }
            }
            
            public event MethodOfPaymentChangeEventHandler MethodOfPaymentChanging;
            
            public event MethodOfPaymentChangeEventHandler MethodOfPaymentChanged;
            
            public event MethodOfPaymentChangeEventHandler MethodOfPaymentDeleting;
            
            public event MethodOfPaymentChangeEventHandler MethodOfPaymentDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMethodOfPayment(MethodOfPayment row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MethodOfPayment AddMethodOfPayment(int Id, tblPaymentTypeRow parenttblPaymentTypeRowBytblPaymentTypetblMethodOfPaymentMap, tblApplicationGroupRow parenttblApplicationGroupRowBytblApplicationGrouptblMethodOfPaymentMap, int Mop, string Description) {
                MethodOfPayment rowMethodOfPayment = ((MethodOfPayment)(this.NewRow()));
                rowMethodOfPayment.ItemArray = new object[] {
                        Id,
                        parenttblPaymentTypeRowBytblPaymentTypetblMethodOfPaymentMap[0],
                        parenttblApplicationGroupRowBytblApplicationGrouptblMethodOfPaymentMap[0],
                        Mop,
                        Description};
                this.Rows.Add(rowMethodOfPayment);
                return rowMethodOfPayment;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MethodsOfPaymentDataTable cln = ((MethodsOfPaymentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MethodsOfPaymentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["mopId"];
                this.columnPaymentTypeId = base.Columns["mopPaymentTypeId"];
                this.columnApplicationGroupId = base.Columns["mopApplicationGroupId"];
                this.columnMop = base.Columns["mopMop"];
                this.columnDescription = base.Columns["mopDescription"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("mopId", typeof(int), null, System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnPaymentTypeId = new System.Data.DataColumn("mopPaymentTypeId", typeof(int), null, System.Data.MappingType.Element);
                this.columnPaymentTypeId.ExtendedProperties.Add("typedName", "PaymentTypeId");
                base.Columns.Add(this.columnPaymentTypeId);
                this.columnApplicationGroupId = new System.Data.DataColumn("mopApplicationGroupId", typeof(int), null, System.Data.MappingType.Element);
                this.columnApplicationGroupId.ExtendedProperties.Add("typedName", "ApplicationGroupId");
                base.Columns.Add(this.columnApplicationGroupId);
                this.columnMop = new System.Data.DataColumn("mopMop", typeof(int), null, System.Data.MappingType.Element);
                this.columnMop.ExtendedProperties.Add("typedName", "Mop");
                base.Columns.Add(this.columnMop);
                this.columnDescription = new System.Data.DataColumn("mopDescription", typeof(string), null, System.Data.MappingType.Element);
                this.columnDescription.ExtendedProperties.Add("typedName", "Description");
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("MethodOfPaymentSchemaKey1", new System.Data.DataColumn[] {
                                this.columnPaymentTypeId,
                                this.columnApplicationGroupId}, false));
                this.columnId.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "MethodOfPayment");
                this.ExtendedProperties.Add("typedPlural", "MethodsOfPayment");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MethodOfPayment NewMethodOfPayment() {
                return ((MethodOfPayment)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MethodOfPayment(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MethodOfPayment);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MethodOfPaymentChanged != null)) {
                    this.MethodOfPaymentChanged(this, new MethodOfPaymentChangeEvent(((MethodOfPayment)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MethodOfPaymentChanging != null)) {
                    this.MethodOfPaymentChanging(this, new MethodOfPaymentChangeEvent(((MethodOfPayment)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MethodOfPaymentDeleted != null)) {
                    this.MethodOfPaymentDeleted(this, new MethodOfPaymentChangeEvent(((MethodOfPayment)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MethodOfPaymentDeleting != null)) {
                    this.MethodOfPaymentDeleting(this, new MethodOfPaymentChangeEvent(((MethodOfPayment)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMethodOfPayment(MethodOfPayment row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MethodOfPaymentSchema ds = new MethodOfPaymentSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MethodsOfPaymentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblApplicationGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columngrpId;
            
            private System.Data.DataColumn columngrpName;
            
            private System.Data.DataColumn columngrpCredentialId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblApplicationGroupDataTable() {
                this.TableName = "tblApplicationGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblApplicationGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblApplicationGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grpIdColumn {
                get {
                    return this.columngrpId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grpNameColumn {
                get {
                    return this.columngrpName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grpCredentialIdColumn {
                get {
                    return this.columngrpCredentialId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblApplicationGroupRow this[int index] {
                get {
                    return ((tblApplicationGroupRow)(this.Rows[index]));
                }
            }
            
            public event tblApplicationGroupRowChangeEventHandler tblApplicationGroupRowChanging;
            
            public event tblApplicationGroupRowChangeEventHandler tblApplicationGroupRowChanged;
            
            public event tblApplicationGroupRowChangeEventHandler tblApplicationGroupRowDeleting;
            
            public event tblApplicationGroupRowChangeEventHandler tblApplicationGroupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblApplicationGroupRow(tblApplicationGroupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblApplicationGroupRow AddtblApplicationGroupRow(string grpName, int grpCredentialId) {
                tblApplicationGroupRow rowtblApplicationGroupRow = ((tblApplicationGroupRow)(this.NewRow()));
                rowtblApplicationGroupRow.ItemArray = new object[] {
                        null,
                        grpName,
                        grpCredentialId};
                this.Rows.Add(rowtblApplicationGroupRow);
                return rowtblApplicationGroupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblApplicationGroupRow FindBygrpId(int grpId) {
                return ((tblApplicationGroupRow)(this.Rows.Find(new object[] {
                            grpId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                tblApplicationGroupDataTable cln = ((tblApplicationGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new tblApplicationGroupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngrpId = base.Columns["grpId"];
                this.columngrpName = base.Columns["grpName"];
                this.columngrpCredentialId = base.Columns["grpCredentialId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngrpId = new System.Data.DataColumn("grpId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrpId);
                this.columngrpName = new System.Data.DataColumn("grpName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrpName);
                this.columngrpCredentialId = new System.Data.DataColumn("grpCredentialId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrpCredentialId);
                this.Constraints.Add(new System.Data.UniqueConstraint("MethodOfPaymentSchemaKey2", new System.Data.DataColumn[] {
                                this.columngrpId}, true));
                this.columngrpId.AutoIncrement = true;
                this.columngrpId.AllowDBNull = false;
                this.columngrpId.ReadOnly = true;
                this.columngrpId.Unique = true;
                this.columngrpName.AllowDBNull = false;
                this.columngrpCredentialId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblApplicationGroupRow NewtblApplicationGroupRow() {
                return ((tblApplicationGroupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new tblApplicationGroupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(tblApplicationGroupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblApplicationGroupRowChanged != null)) {
                    this.tblApplicationGroupRowChanged(this, new tblApplicationGroupRowChangeEvent(((tblApplicationGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblApplicationGroupRowChanging != null)) {
                    this.tblApplicationGroupRowChanging(this, new tblApplicationGroupRowChangeEvent(((tblApplicationGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblApplicationGroupRowDeleted != null)) {
                    this.tblApplicationGroupRowDeleted(this, new tblApplicationGroupRowChangeEvent(((tblApplicationGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblApplicationGroupRowDeleting != null)) {
                    this.tblApplicationGroupRowDeleting(this, new tblApplicationGroupRowChangeEvent(((tblApplicationGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblApplicationGroupRow(tblApplicationGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MethodOfPaymentSchema ds = new MethodOfPaymentSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblApplicationGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblPaymentTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnpaytpID;
            
            private System.Data.DataColumn columnpaytpName;
            
            private System.Data.DataColumn columnpaytpDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblPaymentTypeDataTable() {
                this.TableName = "tblPaymentType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblPaymentTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblPaymentTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn paytpIDColumn {
                get {
                    return this.columnpaytpID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn paytpNameColumn {
                get {
                    return this.columnpaytpName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn paytpDescriptionColumn {
                get {
                    return this.columnpaytpDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblPaymentTypeRow this[int index] {
                get {
                    return ((tblPaymentTypeRow)(this.Rows[index]));
                }
            }
            
            public event tblPaymentTypeRowChangeEventHandler tblPaymentTypeRowChanging;
            
            public event tblPaymentTypeRowChangeEventHandler tblPaymentTypeRowChanged;
            
            public event tblPaymentTypeRowChangeEventHandler tblPaymentTypeRowDeleting;
            
            public event tblPaymentTypeRowChangeEventHandler tblPaymentTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblPaymentTypeRow(tblPaymentTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblPaymentTypeRow AddtblPaymentTypeRow(int paytpID, string paytpName, string paytpDescription) {
                tblPaymentTypeRow rowtblPaymentTypeRow = ((tblPaymentTypeRow)(this.NewRow()));
                rowtblPaymentTypeRow.ItemArray = new object[] {
                        paytpID,
                        paytpName,
                        paytpDescription};
                this.Rows.Add(rowtblPaymentTypeRow);
                return rowtblPaymentTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblPaymentTypeRow FindBypaytpID(int paytpID) {
                return ((tblPaymentTypeRow)(this.Rows.Find(new object[] {
                            paytpID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                tblPaymentTypeDataTable cln = ((tblPaymentTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new tblPaymentTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpaytpID = base.Columns["paytpID"];
                this.columnpaytpName = base.Columns["paytpName"];
                this.columnpaytpDescription = base.Columns["paytpDescription"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpaytpID = new System.Data.DataColumn("paytpID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpaytpID);
                this.columnpaytpName = new System.Data.DataColumn("paytpName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpaytpName);
                this.columnpaytpDescription = new System.Data.DataColumn("paytpDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpaytpDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("MethodOfPaymentSchemaKey3", new System.Data.DataColumn[] {
                                this.columnpaytpID}, true));
                this.columnpaytpID.AllowDBNull = false;
                this.columnpaytpID.Unique = true;
                this.columnpaytpName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblPaymentTypeRow NewtblPaymentTypeRow() {
                return ((tblPaymentTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new tblPaymentTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(tblPaymentTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblPaymentTypeRowChanged != null)) {
                    this.tblPaymentTypeRowChanged(this, new tblPaymentTypeRowChangeEvent(((tblPaymentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblPaymentTypeRowChanging != null)) {
                    this.tblPaymentTypeRowChanging(this, new tblPaymentTypeRowChangeEvent(((tblPaymentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblPaymentTypeRowDeleted != null)) {
                    this.tblPaymentTypeRowDeleted(this, new tblPaymentTypeRowChangeEvent(((tblPaymentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblPaymentTypeRowDeleting != null)) {
                    this.tblPaymentTypeRowDeleting(this, new tblPaymentTypeRowChangeEvent(((tblPaymentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblPaymentTypeRow(tblPaymentTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MethodOfPaymentSchema ds = new MethodOfPaymentSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblPaymentTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MethodOfPayment : System.Data.DataRow {
            
            private MethodsOfPaymentDataTable tableMethodsOfPayment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MethodOfPayment(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMethodsOfPayment = ((MethodsOfPaymentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableMethodsOfPayment.IdColumn]));
                }
                set {
                    this[this.tableMethodsOfPayment.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentTypeId {
                get {
                    try {
                        return ((int)(this[this.tableMethodsOfPayment.PaymentTypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'mopPaymentTypeId\' in table \'tblMethodOfPaymentMap\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMethodsOfPayment.PaymentTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApplicationGroupId {
                get {
                    try {
                        return ((int)(this[this.tableMethodsOfPayment.ApplicationGroupIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'mopApplicationGroupId\' in table \'tblMethodOfPaymentMap\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableMethodsOfPayment.ApplicationGroupIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mop {
                get {
                    try {
                        return ((int)(this[this.tableMethodsOfPayment.MopColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'mopMop\' in table \'tblMethodOfPaymentMap\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMethodsOfPayment.MopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableMethodsOfPayment.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'mopDescription\' in table \'tblMethodOfPaymentMap\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableMethodsOfPayment.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblApplicationGroupRow tblApplicationGroupRow {
                get {
                    return ((tblApplicationGroupRow)(this.GetParentRow(this.Table.ParentRelations["tblApplicationGrouptblMethodOfPaymentMap"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tblApplicationGrouptblMethodOfPaymentMap"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblPaymentTypeRow tblPaymentTypeRow {
                get {
                    return ((tblPaymentTypeRow)(this.GetParentRow(this.Table.ParentRelations["tblPaymentTypetblMethodOfPaymentMap"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tblPaymentTypetblMethodOfPaymentMap"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentTypeIdNull() {
                return this.IsNull(this.tableMethodsOfPayment.PaymentTypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentTypeIdNull() {
                this[this.tableMethodsOfPayment.PaymentTypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplicationGroupIdNull() {
                return this.IsNull(this.tableMethodsOfPayment.ApplicationGroupIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplicationGroupIdNull() {
                this[this.tableMethodsOfPayment.ApplicationGroupIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMopNull() {
                return this.IsNull(this.tableMethodsOfPayment.MopColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMopNull() {
                this[this.tableMethodsOfPayment.MopColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableMethodsOfPayment.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableMethodsOfPayment.DescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblApplicationGroupRow : System.Data.DataRow {
            
            private tblApplicationGroupDataTable tabletblApplicationGroup;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblApplicationGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblApplicationGroup = ((tblApplicationGroupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int grpId {
                get {
                    return ((int)(this[this.tabletblApplicationGroup.grpIdColumn]));
                }
                set {
                    this[this.tabletblApplicationGroup.grpIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grpName {
                get {
                    return ((string)(this[this.tabletblApplicationGroup.grpNameColumn]));
                }
                set {
                    this[this.tabletblApplicationGroup.grpNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int grpCredentialId {
                get {
                    return ((int)(this[this.tabletblApplicationGroup.grpCredentialIdColumn]));
                }
                set {
                    this[this.tabletblApplicationGroup.grpCredentialIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MethodOfPayment[] GetMethodsOfPayment() {
                return ((MethodOfPayment[])(base.GetChildRows(this.Table.ChildRelations["tblApplicationGrouptblMethodOfPaymentMap"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblPaymentTypeRow : System.Data.DataRow {
            
            private tblPaymentTypeDataTable tabletblPaymentType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblPaymentTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblPaymentType = ((tblPaymentTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int paytpID {
                get {
                    return ((int)(this[this.tabletblPaymentType.paytpIDColumn]));
                }
                set {
                    this[this.tabletblPaymentType.paytpIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string paytpName {
                get {
                    return ((string)(this[this.tabletblPaymentType.paytpNameColumn]));
                }
                set {
                    this[this.tabletblPaymentType.paytpNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string paytpDescription {
                get {
                    try {
                        return ((string)(this[this.tabletblPaymentType.paytpDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'paytpDescription\' in table \'tblPaymentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblPaymentType.paytpDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspaytpDescriptionNull() {
                return this.IsNull(this.tabletblPaymentType.paytpDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpaytpDescriptionNull() {
                this[this.tabletblPaymentType.paytpDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MethodOfPayment[] GetMethodsOfPayment() {
                return ((MethodOfPayment[])(base.GetChildRows(this.Table.ChildRelations["tblPaymentTypetblMethodOfPaymentMap"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MethodOfPaymentChangeEvent : System.EventArgs {
            
            private MethodOfPayment eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MethodOfPaymentChangeEvent(MethodOfPayment row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MethodOfPayment Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblApplicationGroupRowChangeEvent : System.EventArgs {
            
            private tblApplicationGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblApplicationGroupRowChangeEvent(tblApplicationGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblApplicationGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblPaymentTypeRowChangeEvent : System.EventArgs {
            
            private tblPaymentTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblPaymentTypeRowChangeEvent(tblPaymentTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblPaymentTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591