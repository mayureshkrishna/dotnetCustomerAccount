//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Cox.DataAccess.Enterprise {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ApplicationGroupSchema")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ApplicationGroupSchema : System.Data.DataSet {
        
        private ApplicationGroupsDataTable tableApplicationGroups;
        
        private IcomsCredentialsDataTable tableIcomsCredentials;
        
        private UsersDataTable tableUsers;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ApplicationGroupSchema() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ApplicationGroupSchema(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblApplicationGroup"] != null)) {
                    base.Tables.Add(new ApplicationGroupsDataTable(ds.Tables["tblApplicationGroup"]));
                }
                if ((ds.Tables["tblIcomsCredential"] != null)) {
                    base.Tables.Add(new IcomsCredentialsDataTable(ds.Tables["tblIcomsCredential"]));
                }
                if ((ds.Tables["tblUser"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["tblUser"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplicationGroupsDataTable ApplicationGroups {
            get {
                return this.tableApplicationGroups;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IcomsCredentialsDataTable IcomsCredentials {
            get {
                return this.tableIcomsCredentials;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ApplicationGroupSchema cln = ((ApplicationGroupSchema)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblApplicationGroup"] != null)) {
                    base.Tables.Add(new ApplicationGroupsDataTable(ds.Tables["tblApplicationGroup"]));
                }
                if ((ds.Tables["tblIcomsCredential"] != null)) {
                    base.Tables.Add(new IcomsCredentialsDataTable(ds.Tables["tblIcomsCredential"]));
                }
                if ((ds.Tables["tblUser"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["tblUser"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableApplicationGroups = ((ApplicationGroupsDataTable)(base.Tables["tblApplicationGroup"]));
            if ((initTable == true)) {
                if ((this.tableApplicationGroups != null)) {
                    this.tableApplicationGroups.InitVars();
                }
            }
            this.tableIcomsCredentials = ((IcomsCredentialsDataTable)(base.Tables["tblIcomsCredential"]));
            if ((initTable == true)) {
                if ((this.tableIcomsCredentials != null)) {
                    this.tableIcomsCredentials.InitVars();
                }
            }
            this.tableUsers = ((UsersDataTable)(base.Tables["tblUser"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ApplicationGroupSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ApplicationGroupSchema.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableApplicationGroups = new ApplicationGroupsDataTable();
            base.Tables.Add(this.tableApplicationGroups);
            this.tableIcomsCredentials = new IcomsCredentialsDataTable();
            base.Tables.Add(this.tableIcomsCredentials);
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("tblIcomsCredentialtblApplicationGroup", new System.Data.DataColumn[] {
                        this.tableIcomsCredentials.IdColumn}, new System.Data.DataColumn[] {
                        this.tableApplicationGroups.CredentialIdColumn});
            this.tableApplicationGroups.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("tblApplicationGrouptblUser", new System.Data.DataColumn[] {
                        this.tableApplicationGroups.IdColumn}, new System.Data.DataColumn[] {
                        this.tableUsers.usrGroupIdColumn});
            this.tableUsers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeApplicationGroups() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIcomsCredentials() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ApplicationGroupSchema ds = new ApplicationGroupSchema();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ApplicationGroupChangeEventHandler(object sender, ApplicationGroupChangeEvent e);
        
        public delegate void IcomsCredentialChangeEventHandler(object sender, IcomsCredentialChangeEvent e);
        
        public delegate void UserChangeEventHandler(object sender, UserChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ApplicationGroupsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnCredentialId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationGroupsDataTable() {
                this.TableName = "tblApplicationGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplicationGroupsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ApplicationGroupsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CredentialIdColumn {
                get {
                    return this.columnCredentialId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationGroup this[int index] {
                get {
                    return ((ApplicationGroup)(this.Rows[index]));
                }
            }
            
            public event ApplicationGroupChangeEventHandler ApplicationGroupChanging;
            
            public event ApplicationGroupChangeEventHandler ApplicationGroupChanged;
            
            public event ApplicationGroupChangeEventHandler ApplicationGroupDeleting;
            
            public event ApplicationGroupChangeEventHandler ApplicationGroupDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddApplicationGroup(ApplicationGroup row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationGroup AddApplicationGroup(string Name, int CredentialId) {
                ApplicationGroup rowApplicationGroup = ((ApplicationGroup)(this.NewRow()));
                rowApplicationGroup.ItemArray = new object[] {
                        null,
                        Name,
                        CredentialId};
                this.Rows.Add(rowApplicationGroup);
                return rowApplicationGroup;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationGroup FindById(int Id) {
                return ((ApplicationGroup)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ApplicationGroupsDataTable cln = ((ApplicationGroupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ApplicationGroupsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["grpId"];
                this.columnName = base.Columns["grpName"];
                this.columnCredentialId = base.Columns["grpCredentialId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("grpId", typeof(int), null, System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnName = new System.Data.DataColumn("grpName", typeof(string), null, System.Data.MappingType.Element);
                this.columnName.ExtendedProperties.Add("typedName", "Name");
                base.Columns.Add(this.columnName);
                this.columnCredentialId = new System.Data.DataColumn("grpCredentialId", typeof(int), null, System.Data.MappingType.Element);
                this.columnCredentialId.ExtendedProperties.Add("typedName", "CredentialId");
                base.Columns.Add(this.columnCredentialId);
                this.Constraints.Add(new System.Data.UniqueConstraint("ApplicationGroupSchemaKey1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnCredentialId.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "ApplicationGroup");
                this.ExtendedProperties.Add("typedPlural", "ApplicationGroups");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationGroup NewApplicationGroup() {
                return ((ApplicationGroup)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ApplicationGroup(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ApplicationGroup);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplicationGroupChanged != null)) {
                    this.ApplicationGroupChanged(this, new ApplicationGroupChangeEvent(((ApplicationGroup)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplicationGroupChanging != null)) {
                    this.ApplicationGroupChanging(this, new ApplicationGroupChangeEvent(((ApplicationGroup)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplicationGroupDeleted != null)) {
                    this.ApplicationGroupDeleted(this, new ApplicationGroupChangeEvent(((ApplicationGroup)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplicationGroupDeleting != null)) {
                    this.ApplicationGroupDeleting(this, new ApplicationGroupChangeEvent(((ApplicationGroup)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveApplicationGroup(ApplicationGroup row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ApplicationGroupSchema ds = new ApplicationGroupSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ApplicationGroupsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IcomsCredentialsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnUsername;
            
            private System.Data.DataColumn columnPassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IcomsCredentialsDataTable() {
                this.TableName = "tblIcomsCredential";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IcomsCredentialsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IcomsCredentialsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IcomsCredential this[int index] {
                get {
                    return ((IcomsCredential)(this.Rows[index]));
                }
            }
            
            public event IcomsCredentialChangeEventHandler IcomsCredentialChanging;
            
            public event IcomsCredentialChangeEventHandler IcomsCredentialChanged;
            
            public event IcomsCredentialChangeEventHandler IcomsCredentialDeleting;
            
            public event IcomsCredentialChangeEventHandler IcomsCredentialDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIcomsCredential(IcomsCredential row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IcomsCredential AddIcomsCredential(string Username, string Password) {
                IcomsCredential rowIcomsCredential = ((IcomsCredential)(this.NewRow()));
                rowIcomsCredential.ItemArray = new object[] {
                        null,
                        Username,
                        Password};
                this.Rows.Add(rowIcomsCredential);
                return rowIcomsCredential;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IcomsCredential FindById(int Id) {
                return ((IcomsCredential)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IcomsCredentialsDataTable cln = ((IcomsCredentialsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IcomsCredentialsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["icId"];
                this.columnUsername = base.Columns["icUsername"];
                this.columnPassword = base.Columns["icPassword"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("icId", typeof(int), null, System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnUsername = new System.Data.DataColumn("icUsername", typeof(string), null, System.Data.MappingType.Element);
                this.columnUsername.ExtendedProperties.Add("typedName", "Username");
                base.Columns.Add(this.columnUsername);
                this.columnPassword = new System.Data.DataColumn("icPassword", typeof(string), null, System.Data.MappingType.Element);
                this.columnPassword.ExtendedProperties.Add("typedName", "Password");
                base.Columns.Add(this.columnPassword);
                this.Constraints.Add(new System.Data.UniqueConstraint("ApplicationGroupSchemaKey2", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnUsername.AllowDBNull = false;
                this.columnPassword.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "IcomsCredential");
                this.ExtendedProperties.Add("typedPlural", "IcomsCredentials");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IcomsCredential NewIcomsCredential() {
                return ((IcomsCredential)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IcomsCredential(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IcomsCredential);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IcomsCredentialChanged != null)) {
                    this.IcomsCredentialChanged(this, new IcomsCredentialChangeEvent(((IcomsCredential)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IcomsCredentialChanging != null)) {
                    this.IcomsCredentialChanging(this, new IcomsCredentialChangeEvent(((IcomsCredential)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IcomsCredentialDeleted != null)) {
                    this.IcomsCredentialDeleted(this, new IcomsCredentialChangeEvent(((IcomsCredential)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IcomsCredentialDeleting != null)) {
                    this.IcomsCredentialDeleting(this, new IcomsCredentialChangeEvent(((IcomsCredential)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIcomsCredential(IcomsCredential row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ApplicationGroupSchema ds = new ApplicationGroupSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IcomsCredentialsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnusrId;
            
            private System.Data.DataColumn columnusrUserName;
            
            private System.Data.DataColumn columnusrGroupId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "tblUser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn usrIdColumn {
                get {
                    return this.columnusrId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn usrUserNameColumn {
                get {
                    return this.columnusrUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn usrGroupIdColumn {
                get {
                    return this.columnusrGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public User this[int index] {
                get {
                    return ((User)(this.Rows[index]));
                }
            }
            
            public event UserChangeEventHandler UserChanging;
            
            public event UserChangeEventHandler UserChanged;
            
            public event UserChangeEventHandler UserDeleting;
            
            public event UserChangeEventHandler UserDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUser(User row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public User AddUser(string usrUserName, int usrGroupId) {
                User rowUser = ((User)(this.NewRow()));
                rowUser.ItemArray = new object[] {
                        null,
                        usrUserName,
                        usrGroupId};
                this.Rows.Add(rowUser);
                return rowUser;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public User FindByusrId(int usrId) {
                return ((User)(this.Rows.Find(new object[] {
                            usrId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnusrId = base.Columns["usrId"];
                this.columnusrUserName = base.Columns["usrUserName"];
                this.columnusrGroupId = base.Columns["usrGroupId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnusrId = new System.Data.DataColumn("usrId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnusrId);
                this.columnusrUserName = new System.Data.DataColumn("usrUserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnusrUserName);
                this.columnusrGroupId = new System.Data.DataColumn("usrGroupId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnusrGroupId);
                this.Constraints.Add(new System.Data.UniqueConstraint("ApplicationGroupSchemaKey5", new System.Data.DataColumn[] {
                                this.columnusrId}, true));
                this.columnusrId.AutoIncrement = true;
                this.columnusrId.AllowDBNull = false;
                this.columnusrId.ReadOnly = true;
                this.columnusrId.Unique = true;
                this.columnusrUserName.AllowDBNull = false;
                this.columnusrGroupId.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "User");
                this.ExtendedProperties.Add("typedPlural", "Users");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public User NewUser() {
                return ((User)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new User(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(User);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserChanged != null)) {
                    this.UserChanged(this, new UserChangeEvent(((User)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserChanging != null)) {
                    this.UserChanging(this, new UserChangeEvent(((User)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserDeleted != null)) {
                    this.UserDeleted(this, new UserChangeEvent(((User)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserDeleting != null)) {
                    this.UserDeleting(this, new UserChangeEvent(((User)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUser(User row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ApplicationGroupSchema ds = new ApplicationGroupSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ApplicationGroup : System.Data.DataRow {
            
            private ApplicationGroupsDataTable tableApplicationGroups;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplicationGroup(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplicationGroups = ((ApplicationGroupsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableApplicationGroups.IdColumn]));
                }
                set {
                    this[this.tableApplicationGroups.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableApplicationGroups.NameColumn]));
                }
                set {
                    this[this.tableApplicationGroups.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CredentialId {
                get {
                    return ((int)(this[this.tableApplicationGroups.CredentialIdColumn]));
                }
                set {
                    this[this.tableApplicationGroups.CredentialIdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IcomsCredential : System.Data.DataRow {
            
            private IcomsCredentialsDataTable tableIcomsCredentials;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IcomsCredential(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIcomsCredentials = ((IcomsCredentialsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableIcomsCredentials.IdColumn]));
                }
                set {
                    this[this.tableIcomsCredentials.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Username {
                get {
                    return ((string)(this[this.tableIcomsCredentials.UsernameColumn]));
                }
                set {
                    this[this.tableIcomsCredentials.UsernameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableIcomsCredentials.PasswordColumn]));
                }
                set {
                    this[this.tableIcomsCredentials.PasswordColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class User : System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal User(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int usrId {
                get {
                    return ((int)(this[this.tableUsers.usrIdColumn]));
                }
                set {
                    this[this.tableUsers.usrIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string usrUserName {
                get {
                    return ((string)(this[this.tableUsers.usrUserNameColumn]));
                }
                set {
                    this[this.tableUsers.usrUserNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int usrGroupId {
                get {
                    return ((int)(this[this.tableUsers.usrGroupIdColumn]));
                }
                set {
                    this[this.tableUsers.usrGroupIdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ApplicationGroupChangeEvent : System.EventArgs {
            
            private ApplicationGroup eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationGroupChangeEvent(ApplicationGroup row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationGroup Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IcomsCredentialChangeEvent : System.EventArgs {
            
            private IcomsCredential eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IcomsCredentialChangeEvent(IcomsCredential row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IcomsCredential Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserChangeEvent : System.EventArgs {
            
            private User eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserChangeEvent(User row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public User Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591