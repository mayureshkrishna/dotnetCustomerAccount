//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Cox.DataAccess.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class UserSettingSchema : DataSet {
        
        private UserSettingsDataTable tableUserSettings;
        
        public UserSettingSchema() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected UserSettingSchema(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UserSetting"] != null)) {
                    this.Tables.Add(new UserSettingsDataTable(ds.Tables["UserSetting"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserSettingsDataTable UserSettings {
            get {
                return this.tableUserSettings;
            }
        }
        
        public override DataSet Clone() {
            UserSettingSchema cln = ((UserSettingSchema)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["UserSetting"] != null)) {
                this.Tables.Add(new UserSettingsDataTable(ds.Tables["UserSetting"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableUserSettings = ((UserSettingsDataTable)(this.Tables["UserSetting"]));
            if ((this.tableUserSettings != null)) {
                this.tableUserSettings.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "UserSettingSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UserSettingSchema.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableUserSettings = new UserSettingsDataTable();
            this.Tables.Add(this.tableUserSettings);
        }
        
        private bool ShouldSerializeUserSettings() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UserSettingChangeEventHandler(object sender, UserSettingChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserSettingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUserSettingDefinitionId;
            
            private DataColumn columnName;
            
            private DataColumn columnValueTypeName;
            
            private DataColumn columnApplicationTypeId;
            
            private DataColumn columnUserId;
            
            private DataColumn columnLogin;
            
            private DataColumn columnValue;
            
            internal UserSettingsDataTable() : 
                    base("UserSetting") {
                this.InitClass();
            }
            
            internal UserSettingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UserSettingDefinitionIdColumn {
                get {
                    return this.columnUserSettingDefinitionId;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ValueTypeNameColumn {
                get {
                    return this.columnValueTypeName;
                }
            }
            
            internal DataColumn ApplicationTypeIdColumn {
                get {
                    return this.columnApplicationTypeId;
                }
            }
            
            internal DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            internal DataColumn LoginColumn {
                get {
                    return this.columnLogin;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            public UserSetting this[int index] {
                get {
                    return ((UserSetting)(this.Rows[index]));
                }
            }
            
            public event UserSettingChangeEventHandler UserSettingChanged;
            
            public event UserSettingChangeEventHandler UserSettingChanging;
            
            public event UserSettingChangeEventHandler UserSettingDeleted;
            
            public event UserSettingChangeEventHandler UserSettingDeleting;
            
            public void AddUserSetting(UserSetting row) {
                this.Rows.Add(row);
            }
            
            public UserSetting AddUserSetting(int UserSettingDefinitionId, string Name, string ValueTypeName, int ApplicationTypeId, int UserId, string Login, string Value) {
                UserSetting rowUserSetting = ((UserSetting)(this.NewRow()));
                rowUserSetting.ItemArray = new object[] {
                        UserSettingDefinitionId,
                        Name,
                        ValueTypeName,
                        ApplicationTypeId,
                        UserId,
                        Login,
                        Value};
                this.Rows.Add(rowUserSetting);
                return rowUserSetting;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UserSettingsDataTable cln = ((UserSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UserSettingsDataTable();
            }
            
            internal void InitVars() {
                this.columnUserSettingDefinitionId = this.Columns["UserSettingDefinitionId"];
                this.columnName = this.Columns["Name"];
                this.columnValueTypeName = this.Columns["ValueTypeName"];
                this.columnApplicationTypeId = this.Columns["ApplicationTypeId"];
                this.columnUserId = this.Columns["UserId"];
                this.columnLogin = this.Columns["Login"];
                this.columnValue = this.Columns["Value"];
            }
            
            private void InitClass() {
                this.columnUserSettingDefinitionId = new DataColumn("UserSettingDefinitionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserSettingDefinitionId);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnValueTypeName = new DataColumn("ValueTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValueTypeName);
                this.columnApplicationTypeId = new DataColumn("ApplicationTypeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplicationTypeId);
                this.columnUserId = new DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserId);
                this.columnLogin = new DataColumn("Login", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLogin);
                this.columnValue = new DataColumn("Value", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
            }
            
            public UserSetting NewUserSetting() {
                return ((UserSetting)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UserSetting(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UserSetting);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserSettingChanged != null)) {
                    this.UserSettingChanged(this, new UserSettingChangeEvent(((UserSetting)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserSettingChanging != null)) {
                    this.UserSettingChanging(this, new UserSettingChangeEvent(((UserSetting)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserSettingDeleted != null)) {
                    this.UserSettingDeleted(this, new UserSettingChangeEvent(((UserSetting)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserSettingDeleting != null)) {
                    this.UserSettingDeleting(this, new UserSettingChangeEvent(((UserSetting)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserSetting(UserSetting row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserSetting : DataRow {
            
            private UserSettingsDataTable tableUserSettings;
            
            internal UserSetting(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserSettings = ((UserSettingsDataTable)(this.Table));
            }
            
            public int UserSettingDefinitionId {
                get {
                    try {
                        return ((int)(this[this.tableUserSettings.UserSettingDefinitionIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserSettings.UserSettingDefinitionIdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableUserSettings.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserSettings.NameColumn] = value;
                }
            }
            
            public string ValueTypeName {
                get {
                    try {
                        return ((string)(this[this.tableUserSettings.ValueTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserSettings.ValueTypeNameColumn] = value;
                }
            }
            
            public int ApplicationTypeId {
                get {
                    try {
                        return ((int)(this[this.tableUserSettings.ApplicationTypeIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserSettings.ApplicationTypeIdColumn] = value;
                }
            }
            
            public int UserId {
                get {
                    try {
                        return ((int)(this[this.tableUserSettings.UserIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserSettings.UserIdColumn] = value;
                }
            }
            
            public string Login {
                get {
                    try {
                        return ((string)(this[this.tableUserSettings.LoginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserSettings.LoginColumn] = value;
                }
            }
            
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUserSettings.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserSettings.ValueColumn] = value;
                }
            }
            
            public bool IsUserSettingDefinitionIdNull() {
                return this.IsNull(this.tableUserSettings.UserSettingDefinitionIdColumn);
            }
            
            public void SetUserSettingDefinitionIdNull() {
                this[this.tableUserSettings.UserSettingDefinitionIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableUserSettings.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableUserSettings.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsValueTypeNameNull() {
                return this.IsNull(this.tableUserSettings.ValueTypeNameColumn);
            }
            
            public void SetValueTypeNameNull() {
                this[this.tableUserSettings.ValueTypeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplicationTypeIdNull() {
                return this.IsNull(this.tableUserSettings.ApplicationTypeIdColumn);
            }
            
            public void SetApplicationTypeIdNull() {
                this[this.tableUserSettings.ApplicationTypeIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIdNull() {
                return this.IsNull(this.tableUserSettings.UserIdColumn);
            }
            
            public void SetUserIdNull() {
                this[this.tableUserSettings.UserIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsLoginNull() {
                return this.IsNull(this.tableUserSettings.LoginColumn);
            }
            
            public void SetLoginNull() {
                this[this.tableUserSettings.LoginColumn] = System.Convert.DBNull;
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tableUserSettings.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tableUserSettings.ValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserSettingChangeEvent : EventArgs {
            
            private UserSetting eventRow;
            
            private DataRowAction eventAction;
            
            public UserSettingChangeEvent(UserSetting row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserSetting Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
