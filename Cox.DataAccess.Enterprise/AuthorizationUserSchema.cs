//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Cox.DataAccess.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AuthorizationUserSchema : DataSet {
        
        private AuthorizationUserDataTable tableAuthorizationUser;
        
        private BusinessUnitDataTable tableBusinessUnit;
        
        public AuthorizationUserSchema() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AuthorizationUserSchema(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AuthorizationUser"] != null)) {
                    this.Tables.Add(new AuthorizationUserDataTable(ds.Tables["AuthorizationUser"]));
                }
                if ((ds.Tables["BusinessUnit"] != null)) {
                    this.Tables.Add(new BusinessUnitDataTable(ds.Tables["BusinessUnit"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AuthorizationUserDataTable AuthorizationUser {
            get {
                return this.tableAuthorizationUser;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BusinessUnitDataTable BusinessUnit {
            get {
                return this.tableBusinessUnit;
            }
        }
        
        public override DataSet Clone() {
            AuthorizationUserSchema cln = ((AuthorizationUserSchema)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AuthorizationUser"] != null)) {
                this.Tables.Add(new AuthorizationUserDataTable(ds.Tables["AuthorizationUser"]));
            }
            if ((ds.Tables["BusinessUnit"] != null)) {
                this.Tables.Add(new BusinessUnitDataTable(ds.Tables["BusinessUnit"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAuthorizationUser = ((AuthorizationUserDataTable)(this.Tables["AuthorizationUser"]));
            if ((this.tableAuthorizationUser != null)) {
                this.tableAuthorizationUser.InitVars();
            }
            this.tableBusinessUnit = ((BusinessUnitDataTable)(this.Tables["BusinessUnit"]));
            if ((this.tableBusinessUnit != null)) {
                this.tableBusinessUnit.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "AuthorizationUserSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AuthorizationUserSchema.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAuthorizationUser = new AuthorizationUserDataTable();
            this.Tables.Add(this.tableAuthorizationUser);
            this.tableBusinessUnit = new BusinessUnitDataTable();
            this.Tables.Add(this.tableBusinessUnit);
        }
        
        private bool ShouldSerializeAuthorizationUser() {
            return false;
        }
        
        private bool ShouldSerializeBusinessUnit() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AuthorizationUserRowChangeEventHandler(object sender, AuthorizationUserRowChangeEvent e);
        
        public delegate void BusinessUnitRowChangeEventHandler(object sender, BusinessUnitRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AuthorizationUserDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAuthorizationUserId;
            
            private DataColumn columnLogin;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnMiddleName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnEmailAddress;
            
            internal AuthorizationUserDataTable() : 
                    base("AuthorizationUser") {
                this.InitClass();
            }
            
            internal AuthorizationUserDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AuthorizationUserIdColumn {
                get {
                    return this.columnAuthorizationUserId;
                }
            }
            
            internal DataColumn LoginColumn {
                get {
                    return this.columnLogin;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn MiddleNameColumn {
                get {
                    return this.columnMiddleName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn EmailAddressColumn {
                get {
                    return this.columnEmailAddress;
                }
            }
            
            public AuthorizationUserRow this[int index] {
                get {
                    return ((AuthorizationUserRow)(this.Rows[index]));
                }
            }
            
            public event AuthorizationUserRowChangeEventHandler AuthorizationUserRowChanged;
            
            public event AuthorizationUserRowChangeEventHandler AuthorizationUserRowChanging;
            
            public event AuthorizationUserRowChangeEventHandler AuthorizationUserRowDeleted;
            
            public event AuthorizationUserRowChangeEventHandler AuthorizationUserRowDeleting;
            
            public void AddAuthorizationUserRow(AuthorizationUserRow row) {
                this.Rows.Add(row);
            }
            
            public AuthorizationUserRow AddAuthorizationUserRow(string Login, string FirstName, string MiddleName, string LastName, string EmailAddress) {
                AuthorizationUserRow rowAuthorizationUserRow = ((AuthorizationUserRow)(this.NewRow()));
                rowAuthorizationUserRow.ItemArray = new object[] {
                        null,
                        Login,
                        FirstName,
                        MiddleName,
                        LastName,
                        EmailAddress};
                this.Rows.Add(rowAuthorizationUserRow);
                return rowAuthorizationUserRow;
            }
            
            public AuthorizationUserRow FindByAuthorizationUserId(int AuthorizationUserId) {
                return ((AuthorizationUserRow)(this.Rows.Find(new object[] {
                            AuthorizationUserId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AuthorizationUserDataTable cln = ((AuthorizationUserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AuthorizationUserDataTable();
            }
            
            internal void InitVars() {
                this.columnAuthorizationUserId = this.Columns["AuthorizationUserId"];
                this.columnLogin = this.Columns["Login"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnMiddleName = this.Columns["MiddleName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnEmailAddress = this.Columns["EmailAddress"];
            }
            
            private void InitClass() {
                this.columnAuthorizationUserId = new DataColumn("AuthorizationUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAuthorizationUserId);
                this.columnLogin = new DataColumn("Login", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLogin);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnMiddleName = new DataColumn("MiddleName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMiddleName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnEmailAddress = new DataColumn("EmailAddress", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailAddress);
                this.Constraints.Add(new UniqueConstraint("AuthorizationUserSchemaKey1", new DataColumn[] {
                                this.columnAuthorizationUserId}, true));
                this.columnAuthorizationUserId.AutoIncrement = true;
                this.columnAuthorizationUserId.AllowDBNull = false;
                this.columnAuthorizationUserId.ReadOnly = true;
                this.columnAuthorizationUserId.Unique = true;
                this.columnLogin.AllowDBNull = false;
                this.columnFirstName.AllowDBNull = false;
                this.columnLastName.AllowDBNull = false;
                this.columnEmailAddress.AllowDBNull = false;
            }
            
            public AuthorizationUserRow NewAuthorizationUserRow() {
                return ((AuthorizationUserRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AuthorizationUserRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AuthorizationUserRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AuthorizationUserRowChanged != null)) {
                    this.AuthorizationUserRowChanged(this, new AuthorizationUserRowChangeEvent(((AuthorizationUserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AuthorizationUserRowChanging != null)) {
                    this.AuthorizationUserRowChanging(this, new AuthorizationUserRowChangeEvent(((AuthorizationUserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AuthorizationUserRowDeleted != null)) {
                    this.AuthorizationUserRowDeleted(this, new AuthorizationUserRowChangeEvent(((AuthorizationUserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AuthorizationUserRowDeleting != null)) {
                    this.AuthorizationUserRowDeleting(this, new AuthorizationUserRowChangeEvent(((AuthorizationUserRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAuthorizationUserRow(AuthorizationUserRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AuthorizationUserRow : DataRow {
            
            private AuthorizationUserDataTable tableAuthorizationUser;
            
            internal AuthorizationUserRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAuthorizationUser = ((AuthorizationUserDataTable)(this.Table));
            }
            
            public int AuthorizationUserId {
                get {
                    return ((int)(this[this.tableAuthorizationUser.AuthorizationUserIdColumn]));
                }
                set {
                    this[this.tableAuthorizationUser.AuthorizationUserIdColumn] = value;
                }
            }
            
            public string Login {
                get {
                    return ((string)(this[this.tableAuthorizationUser.LoginColumn]));
                }
                set {
                    this[this.tableAuthorizationUser.LoginColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    return ((string)(this[this.tableAuthorizationUser.FirstNameColumn]));
                }
                set {
                    this[this.tableAuthorizationUser.FirstNameColumn] = value;
                }
            }
            
            public string MiddleName {
                get {
                    try {
                        return ((string)(this[this.tableAuthorizationUser.MiddleNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuthorizationUser.MiddleNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    return ((string)(this[this.tableAuthorizationUser.LastNameColumn]));
                }
                set {
                    this[this.tableAuthorizationUser.LastNameColumn] = value;
                }
            }
            
            public string EmailAddress {
                get {
                    return ((string)(this[this.tableAuthorizationUser.EmailAddressColumn]));
                }
                set {
                    this[this.tableAuthorizationUser.EmailAddressColumn] = value;
                }
            }
            
            public bool IsMiddleNameNull() {
                return this.IsNull(this.tableAuthorizationUser.MiddleNameColumn);
            }
            
            public void SetMiddleNameNull() {
                this[this.tableAuthorizationUser.MiddleNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AuthorizationUserRowChangeEvent : EventArgs {
            
            private AuthorizationUserRow eventRow;
            
            private DataRowAction eventAction;
            
            public AuthorizationUserRowChangeEvent(AuthorizationUserRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AuthorizationUserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BusinessUnitDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBusinessUnitId;
            
            internal BusinessUnitDataTable() : 
                    base("BusinessUnit") {
                this.InitClass();
            }
            
            internal BusinessUnitDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BusinessUnitIdColumn {
                get {
                    return this.columnBusinessUnitId;
                }
            }
            
            public BusinessUnitRow this[int index] {
                get {
                    return ((BusinessUnitRow)(this.Rows[index]));
                }
            }
            
            public event BusinessUnitRowChangeEventHandler BusinessUnitRowChanged;
            
            public event BusinessUnitRowChangeEventHandler BusinessUnitRowChanging;
            
            public event BusinessUnitRowChangeEventHandler BusinessUnitRowDeleted;
            
            public event BusinessUnitRowChangeEventHandler BusinessUnitRowDeleting;
            
            public void AddBusinessUnitRow(BusinessUnitRow row) {
                this.Rows.Add(row);
            }
            
            public BusinessUnitRow AddBusinessUnitRow(int BusinessUnitId) {
                BusinessUnitRow rowBusinessUnitRow = ((BusinessUnitRow)(this.NewRow()));
                rowBusinessUnitRow.ItemArray = new object[] {
                        BusinessUnitId};
                this.Rows.Add(rowBusinessUnitRow);
                return rowBusinessUnitRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BusinessUnitDataTable cln = ((BusinessUnitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BusinessUnitDataTable();
            }
            
            internal void InitVars() {
                this.columnBusinessUnitId = this.Columns["BusinessUnitId"];
            }
            
            private void InitClass() {
                this.columnBusinessUnitId = new DataColumn("BusinessUnitId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBusinessUnitId);
            }
            
            public BusinessUnitRow NewBusinessUnitRow() {
                return ((BusinessUnitRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BusinessUnitRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BusinessUnitRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BusinessUnitRowChanged != null)) {
                    this.BusinessUnitRowChanged(this, new BusinessUnitRowChangeEvent(((BusinessUnitRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BusinessUnitRowChanging != null)) {
                    this.BusinessUnitRowChanging(this, new BusinessUnitRowChangeEvent(((BusinessUnitRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BusinessUnitRowDeleted != null)) {
                    this.BusinessUnitRowDeleted(this, new BusinessUnitRowChangeEvent(((BusinessUnitRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BusinessUnitRowDeleting != null)) {
                    this.BusinessUnitRowDeleting(this, new BusinessUnitRowChangeEvent(((BusinessUnitRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBusinessUnitRow(BusinessUnitRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BusinessUnitRow : DataRow {
            
            private BusinessUnitDataTable tableBusinessUnit;
            
            internal BusinessUnitRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBusinessUnit = ((BusinessUnitDataTable)(this.Table));
            }
            
            public int BusinessUnitId {
                get {
                    try {
                        return ((int)(this[this.tableBusinessUnit.BusinessUnitIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBusinessUnit.BusinessUnitIdColumn] = value;
                }
            }
            
            public bool IsBusinessUnitIdNull() {
                return this.IsNull(this.tableBusinessUnit.BusinessUnitIdColumn);
            }
            
            public void SetBusinessUnitIdNull() {
                this[this.tableBusinessUnit.BusinessUnitIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BusinessUnitRowChangeEvent : EventArgs {
            
            private BusinessUnitRow eventRow;
            
            private DataRowAction eventAction;
            
            public BusinessUnitRowChangeEvent(BusinessUnitRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BusinessUnitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
