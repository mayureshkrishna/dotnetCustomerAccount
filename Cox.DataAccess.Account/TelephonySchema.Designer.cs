//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Cox.DataAccess.Account {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("TelephonySchema")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TelephonySchema : System.Data.DataSet {
        
        private DistinctiveRingDataTable tableDistinctiveRing;
        
        private StatementTelephoneNumbersDataTable tableStatementTelephoneNumbers;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TelephonySchema() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TelephonySchema(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DistinctiveRing"] != null)) {
                    base.Tables.Add(new DistinctiveRingDataTable(ds.Tables["DistinctiveRing"]));
                }
                if ((ds.Tables["StatementTelephoneNumbers"] != null)) {
                    base.Tables.Add(new StatementTelephoneNumbersDataTable(ds.Tables["StatementTelephoneNumbers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistinctiveRingDataTable DistinctiveRing {
            get {
                return this.tableDistinctiveRing;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StatementTelephoneNumbersDataTable StatementTelephoneNumbers {
            get {
                return this.tableStatementTelephoneNumbers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            TelephonySchema cln = ((TelephonySchema)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DistinctiveRing"] != null)) {
                    base.Tables.Add(new DistinctiveRingDataTable(ds.Tables["DistinctiveRing"]));
                }
                if ((ds.Tables["StatementTelephoneNumbers"] != null)) {
                    base.Tables.Add(new StatementTelephoneNumbersDataTable(ds.Tables["StatementTelephoneNumbers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDistinctiveRing = ((DistinctiveRingDataTable)(base.Tables["DistinctiveRing"]));
            if ((initTable == true)) {
                if ((this.tableDistinctiveRing != null)) {
                    this.tableDistinctiveRing.InitVars();
                }
            }
            this.tableStatementTelephoneNumbers = ((StatementTelephoneNumbersDataTable)(base.Tables["StatementTelephoneNumbers"]));
            if ((initTable == true)) {
                if ((this.tableStatementTelephoneNumbers != null)) {
                    this.tableStatementTelephoneNumbers.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TelephonySchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TelephonySchema.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDistinctiveRing = new DistinctiveRingDataTable();
            base.Tables.Add(this.tableDistinctiveRing);
            this.tableStatementTelephoneNumbers = new StatementTelephoneNumbersDataTable();
            base.Tables.Add(this.tableStatementTelephoneNumbers);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistinctiveRing() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStatementTelephoneNumbers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            TelephonySchema ds = new TelephonySchema();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DistinctiveRingRowChangeEventHandler(object sender, DistinctiveRingRowChangeEvent e);
        
        public delegate void StatementTelephoneNumbersRowChangeEventHandler(object sender, StatementTelephoneNumbersRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistinctiveRingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSite_Id;
            
            private System.Data.DataColumn columnAccount_Number;
            
            private System.Data.DataColumn columnService_Category_Code;
            
            private System.Data.DataColumn columnService_Occurrence;
            
            private System.Data.DataColumn columnCustomer_TN_sequence;
            
            private System.Data.DataColumn columnOccurrence_TN_use;
            
            private System.Data.DataColumn columnOccurrence_TN_status;
            
            private System.Data.DataColumn columnNPA_STD;
            
            private System.Data.DataColumn columnExchange;
            
            private System.Data.DataColumn columnTN_Line_Number;
            
            private System.Data.DataColumn columnCustomer_TEL_Number;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctiveRingDataTable() {
                this.TableName = "DistinctiveRing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistinctiveRingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistinctiveRingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Site_IdColumn {
                get {
                    return this.columnSite_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Account_NumberColumn {
                get {
                    return this.columnAccount_Number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Service_Category_CodeColumn {
                get {
                    return this.columnService_Category_Code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Service_OccurrenceColumn {
                get {
                    return this.columnService_Occurrence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Customer_TN_sequenceColumn {
                get {
                    return this.columnCustomer_TN_sequence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Occurrence_TN_useColumn {
                get {
                    return this.columnOccurrence_TN_use;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Occurrence_TN_statusColumn {
                get {
                    return this.columnOccurrence_TN_status;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NPA_STDColumn {
                get {
                    return this.columnNPA_STD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExchangeColumn {
                get {
                    return this.columnExchange;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TN_Line_NumberColumn {
                get {
                    return this.columnTN_Line_Number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Customer_TEL_NumberColumn {
                get {
                    return this.columnCustomer_TEL_Number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctiveRingRow this[int index] {
                get {
                    return ((DistinctiveRingRow)(this.Rows[index]));
                }
            }
            
            public event DistinctiveRingRowChangeEventHandler DistinctiveRingRowChanging;
            
            public event DistinctiveRingRowChangeEventHandler DistinctiveRingRowChanged;
            
            public event DistinctiveRingRowChangeEventHandler DistinctiveRingRowDeleting;
            
            public event DistinctiveRingRowChangeEventHandler DistinctiveRingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistinctiveRingRow(DistinctiveRingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctiveRingRow AddDistinctiveRingRow(int Site_Id, int Account_Number, string Service_Category_Code, int Service_Occurrence, int Customer_TN_sequence, string Occurrence_TN_use, string Occurrence_TN_status, int NPA_STD, int Exchange, int TN_Line_Number, decimal Customer_TEL_Number) {
                DistinctiveRingRow rowDistinctiveRingRow = ((DistinctiveRingRow)(this.NewRow()));
                rowDistinctiveRingRow.ItemArray = new object[] {
                        Site_Id,
                        Account_Number,
                        Service_Category_Code,
                        Service_Occurrence,
                        Customer_TN_sequence,
                        Occurrence_TN_use,
                        Occurrence_TN_status,
                        NPA_STD,
                        Exchange,
                        TN_Line_Number,
                        Customer_TEL_Number};
                this.Rows.Add(rowDistinctiveRingRow);
                return rowDistinctiveRingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DistinctiveRingDataTable cln = ((DistinctiveRingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DistinctiveRingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSite_Id = base.Columns["Site_Id"];
                this.columnAccount_Number = base.Columns["Account_Number"];
                this.columnService_Category_Code = base.Columns["Service_Category_Code"];
                this.columnService_Occurrence = base.Columns["Service_Occurrence"];
                this.columnCustomer_TN_sequence = base.Columns["Customer_TN_sequence"];
                this.columnOccurrence_TN_use = base.Columns["Occurrence_TN_use"];
                this.columnOccurrence_TN_status = base.Columns["Occurrence_TN_status"];
                this.columnNPA_STD = base.Columns["NPA_STD"];
                this.columnExchange = base.Columns["Exchange"];
                this.columnTN_Line_Number = base.Columns["TN_Line_Number"];
                this.columnCustomer_TEL_Number = base.Columns["Customer_TEL_Number"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSite_Id = new System.Data.DataColumn("Site_Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSite_Id);
                this.columnAccount_Number = new System.Data.DataColumn("Account_Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccount_Number);
                this.columnService_Category_Code = new System.Data.DataColumn("Service_Category_Code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnService_Category_Code);
                this.columnService_Occurrence = new System.Data.DataColumn("Service_Occurrence", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnService_Occurrence);
                this.columnCustomer_TN_sequence = new System.Data.DataColumn("Customer_TN_sequence", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer_TN_sequence);
                this.columnOccurrence_TN_use = new System.Data.DataColumn("Occurrence_TN_use", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccurrence_TN_use);
                this.columnOccurrence_TN_status = new System.Data.DataColumn("Occurrence_TN_status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccurrence_TN_status);
                this.columnNPA_STD = new System.Data.DataColumn("NPA_STD", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNPA_STD);
                this.columnExchange = new System.Data.DataColumn("Exchange", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExchange);
                this.columnTN_Line_Number = new System.Data.DataColumn("TN_Line_Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTN_Line_Number);
                this.columnCustomer_TEL_Number = new System.Data.DataColumn("Customer_TEL_Number", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer_TEL_Number);
                this.columnCustomer_TEL_Number.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctiveRingRow NewDistinctiveRingRow() {
                return ((DistinctiveRingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DistinctiveRingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DistinctiveRingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistinctiveRingRowChanged != null)) {
                    this.DistinctiveRingRowChanged(this, new DistinctiveRingRowChangeEvent(((DistinctiveRingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistinctiveRingRowChanging != null)) {
                    this.DistinctiveRingRowChanging(this, new DistinctiveRingRowChangeEvent(((DistinctiveRingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistinctiveRingRowDeleted != null)) {
                    this.DistinctiveRingRowDeleted(this, new DistinctiveRingRowChangeEvent(((DistinctiveRingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistinctiveRingRowDeleting != null)) {
                    this.DistinctiveRingRowDeleting(this, new DistinctiveRingRowChangeEvent(((DistinctiveRingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistinctiveRingRow(DistinctiveRingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TelephonySchema ds = new TelephonySchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistinctiveRingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StatementTelephoneNumbersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSite_Id;
            
            private System.Data.DataColumn columnProcess_Control;
            
            private System.Data.DataColumn columnAccount_Number;
            
            private System.Data.DataColumn columnStatement_Code;
            
            private System.Data.DataColumn columnArea_Code;
            
            private System.Data.DataColumn columnExchange;
            
            private System.Data.DataColumn columnLine_Number;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatementTelephoneNumbersDataTable() {
                this.TableName = "StatementTelephoneNumbers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatementTelephoneNumbersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StatementTelephoneNumbersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Site_IdColumn {
                get {
                    return this.columnSite_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Process_ControlColumn {
                get {
                    return this.columnProcess_Control;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Account_NumberColumn {
                get {
                    return this.columnAccount_Number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Statement_CodeColumn {
                get {
                    return this.columnStatement_Code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Area_CodeColumn {
                get {
                    return this.columnArea_Code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExchangeColumn {
                get {
                    return this.columnExchange;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Line_NumberColumn {
                get {
                    return this.columnLine_Number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatementTelephoneNumbersRow this[int index] {
                get {
                    return ((StatementTelephoneNumbersRow)(this.Rows[index]));
                }
            }
            
            public event StatementTelephoneNumbersRowChangeEventHandler StatementTelephoneNumbersRowChanging;
            
            public event StatementTelephoneNumbersRowChangeEventHandler StatementTelephoneNumbersRowChanged;
            
            public event StatementTelephoneNumbersRowChangeEventHandler StatementTelephoneNumbersRowDeleting;
            
            public event StatementTelephoneNumbersRowChangeEventHandler StatementTelephoneNumbersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStatementTelephoneNumbersRow(StatementTelephoneNumbersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatementTelephoneNumbersRow AddStatementTelephoneNumbersRow(int Site_Id, int Process_Control, int Account_Number, int Statement_Code, int Area_Code, int Exchange, int Line_Number) {
                StatementTelephoneNumbersRow rowStatementTelephoneNumbersRow = ((StatementTelephoneNumbersRow)(this.NewRow()));
                rowStatementTelephoneNumbersRow.ItemArray = new object[] {
                        Site_Id,
                        Process_Control,
                        Account_Number,
                        Statement_Code,
                        Area_Code,
                        Exchange,
                        Line_Number};
                this.Rows.Add(rowStatementTelephoneNumbersRow);
                return rowStatementTelephoneNumbersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StatementTelephoneNumbersDataTable cln = ((StatementTelephoneNumbersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StatementTelephoneNumbersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSite_Id = base.Columns["Site_Id"];
                this.columnProcess_Control = base.Columns["Process_Control"];
                this.columnAccount_Number = base.Columns["Account_Number"];
                this.columnStatement_Code = base.Columns["Statement_Code"];
                this.columnArea_Code = base.Columns["Area_Code"];
                this.columnExchange = base.Columns["Exchange"];
                this.columnLine_Number = base.Columns["Line_Number"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSite_Id = new System.Data.DataColumn("Site_Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSite_Id);
                this.columnProcess_Control = new System.Data.DataColumn("Process_Control", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess_Control);
                this.columnAccount_Number = new System.Data.DataColumn("Account_Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccount_Number);
                this.columnStatement_Code = new System.Data.DataColumn("Statement_Code", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatement_Code);
                this.columnArea_Code = new System.Data.DataColumn("Area_Code", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArea_Code);
                this.columnExchange = new System.Data.DataColumn("Exchange", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExchange);
                this.columnLine_Number = new System.Data.DataColumn("Line_Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLine_Number);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatementTelephoneNumbersRow NewStatementTelephoneNumbersRow() {
                return ((StatementTelephoneNumbersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StatementTelephoneNumbersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StatementTelephoneNumbersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StatementTelephoneNumbersRowChanged != null)) {
                    this.StatementTelephoneNumbersRowChanged(this, new StatementTelephoneNumbersRowChangeEvent(((StatementTelephoneNumbersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StatementTelephoneNumbersRowChanging != null)) {
                    this.StatementTelephoneNumbersRowChanging(this, new StatementTelephoneNumbersRowChangeEvent(((StatementTelephoneNumbersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StatementTelephoneNumbersRowDeleted != null)) {
                    this.StatementTelephoneNumbersRowDeleted(this, new StatementTelephoneNumbersRowChangeEvent(((StatementTelephoneNumbersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StatementTelephoneNumbersRowDeleting != null)) {
                    this.StatementTelephoneNumbersRowDeleting(this, new StatementTelephoneNumbersRowChangeEvent(((StatementTelephoneNumbersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStatementTelephoneNumbersRow(StatementTelephoneNumbersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TelephonySchema ds = new TelephonySchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StatementTelephoneNumbersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistinctiveRingRow : System.Data.DataRow {
            
            private DistinctiveRingDataTable tableDistinctiveRing;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistinctiveRingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistinctiveRing = ((DistinctiveRingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Site_Id {
                get {
                    try {
                        return ((int)(this[this.tableDistinctiveRing.Site_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Site_Id\' in table \'DistinctiveRing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.Site_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Account_Number {
                get {
                    try {
                        return ((int)(this[this.tableDistinctiveRing.Account_NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Account_Number\' in table \'DistinctiveRing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.Account_NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Service_Category_Code {
                get {
                    try {
                        return ((string)(this[this.tableDistinctiveRing.Service_Category_CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Service_Category_Code\' in table \'DistinctiveRing\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.Service_Category_CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Service_Occurrence {
                get {
                    try {
                        return ((int)(this[this.tableDistinctiveRing.Service_OccurrenceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Service_Occurrence\' in table \'DistinctiveRing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.Service_OccurrenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Customer_TN_sequence {
                get {
                    try {
                        return ((int)(this[this.tableDistinctiveRing.Customer_TN_sequenceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Customer_TN_sequence\' in table \'DistinctiveRing\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.Customer_TN_sequenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Occurrence_TN_use {
                get {
                    try {
                        return ((string)(this[this.tableDistinctiveRing.Occurrence_TN_useColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Occurrence_TN_use\' in table \'DistinctiveRing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.Occurrence_TN_useColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Occurrence_TN_status {
                get {
                    try {
                        return ((string)(this[this.tableDistinctiveRing.Occurrence_TN_statusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Occurrence_TN_status\' in table \'DistinctiveRing\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.Occurrence_TN_statusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NPA_STD {
                get {
                    try {
                        return ((int)(this[this.tableDistinctiveRing.NPA_STDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NPA_STD\' in table \'DistinctiveRing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.NPA_STDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Exchange {
                get {
                    try {
                        return ((int)(this[this.tableDistinctiveRing.ExchangeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Exchange\' in table \'DistinctiveRing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.ExchangeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TN_Line_Number {
                get {
                    try {
                        return ((int)(this[this.tableDistinctiveRing.TN_Line_NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TN_Line_Number\' in table \'DistinctiveRing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistinctiveRing.TN_Line_NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Customer_TEL_Number {
                get {
                    return ((decimal)(this[this.tableDistinctiveRing.Customer_TEL_NumberColumn]));
                }
                set {
                    this[this.tableDistinctiveRing.Customer_TEL_NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSite_IdNull() {
                return this.IsNull(this.tableDistinctiveRing.Site_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSite_IdNull() {
                this[this.tableDistinctiveRing.Site_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccount_NumberNull() {
                return this.IsNull(this.tableDistinctiveRing.Account_NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccount_NumberNull() {
                this[this.tableDistinctiveRing.Account_NumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsService_Category_CodeNull() {
                return this.IsNull(this.tableDistinctiveRing.Service_Category_CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetService_Category_CodeNull() {
                this[this.tableDistinctiveRing.Service_Category_CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsService_OccurrenceNull() {
                return this.IsNull(this.tableDistinctiveRing.Service_OccurrenceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetService_OccurrenceNull() {
                this[this.tableDistinctiveRing.Service_OccurrenceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomer_TN_sequenceNull() {
                return this.IsNull(this.tableDistinctiveRing.Customer_TN_sequenceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomer_TN_sequenceNull() {
                this[this.tableDistinctiveRing.Customer_TN_sequenceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccurrence_TN_useNull() {
                return this.IsNull(this.tableDistinctiveRing.Occurrence_TN_useColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccurrence_TN_useNull() {
                this[this.tableDistinctiveRing.Occurrence_TN_useColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccurrence_TN_statusNull() {
                return this.IsNull(this.tableDistinctiveRing.Occurrence_TN_statusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccurrence_TN_statusNull() {
                this[this.tableDistinctiveRing.Occurrence_TN_statusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNPA_STDNull() {
                return this.IsNull(this.tableDistinctiveRing.NPA_STDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNPA_STDNull() {
                this[this.tableDistinctiveRing.NPA_STDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExchangeNull() {
                return this.IsNull(this.tableDistinctiveRing.ExchangeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExchangeNull() {
                this[this.tableDistinctiveRing.ExchangeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTN_Line_NumberNull() {
                return this.IsNull(this.tableDistinctiveRing.TN_Line_NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTN_Line_NumberNull() {
                this[this.tableDistinctiveRing.TN_Line_NumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StatementTelephoneNumbersRow : System.Data.DataRow {
            
            private StatementTelephoneNumbersDataTable tableStatementTelephoneNumbers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatementTelephoneNumbersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStatementTelephoneNumbers = ((StatementTelephoneNumbersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Site_Id {
                get {
                    try {
                        return ((int)(this[this.tableStatementTelephoneNumbers.Site_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Site_Id\' in table \'StatementTelephoneNumbers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatementTelephoneNumbers.Site_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Process_Control {
                get {
                    try {
                        return ((int)(this[this.tableStatementTelephoneNumbers.Process_ControlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Process_Control\' in table \'StatementTelephoneNumbers\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableStatementTelephoneNumbers.Process_ControlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Account_Number {
                get {
                    try {
                        return ((int)(this[this.tableStatementTelephoneNumbers.Account_NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Account_Number\' in table \'StatementTelephoneNumbers\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableStatementTelephoneNumbers.Account_NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Statement_Code {
                get {
                    try {
                        return ((int)(this[this.tableStatementTelephoneNumbers.Statement_CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Statement_Code\' in table \'StatementTelephoneNumbers\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableStatementTelephoneNumbers.Statement_CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Area_Code {
                get {
                    try {
                        return ((int)(this[this.tableStatementTelephoneNumbers.Area_CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Area_Code\' in table \'StatementTelephoneNumbers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatementTelephoneNumbers.Area_CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Exchange {
                get {
                    try {
                        return ((int)(this[this.tableStatementTelephoneNumbers.ExchangeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Exchange\' in table \'StatementTelephoneNumbers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatementTelephoneNumbers.ExchangeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Line_Number {
                get {
                    try {
                        return ((int)(this[this.tableStatementTelephoneNumbers.Line_NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Line_Number\' in table \'StatementTelephoneNumbers\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableStatementTelephoneNumbers.Line_NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSite_IdNull() {
                return this.IsNull(this.tableStatementTelephoneNumbers.Site_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSite_IdNull() {
                this[this.tableStatementTelephoneNumbers.Site_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcess_ControlNull() {
                return this.IsNull(this.tableStatementTelephoneNumbers.Process_ControlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcess_ControlNull() {
                this[this.tableStatementTelephoneNumbers.Process_ControlColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccount_NumberNull() {
                return this.IsNull(this.tableStatementTelephoneNumbers.Account_NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccount_NumberNull() {
                this[this.tableStatementTelephoneNumbers.Account_NumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatement_CodeNull() {
                return this.IsNull(this.tableStatementTelephoneNumbers.Statement_CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatement_CodeNull() {
                this[this.tableStatementTelephoneNumbers.Statement_CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArea_CodeNull() {
                return this.IsNull(this.tableStatementTelephoneNumbers.Area_CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArea_CodeNull() {
                this[this.tableStatementTelephoneNumbers.Area_CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExchangeNull() {
                return this.IsNull(this.tableStatementTelephoneNumbers.ExchangeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExchangeNull() {
                this[this.tableStatementTelephoneNumbers.ExchangeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLine_NumberNull() {
                return this.IsNull(this.tableStatementTelephoneNumbers.Line_NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLine_NumberNull() {
                this[this.tableStatementTelephoneNumbers.Line_NumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistinctiveRingRowChangeEvent : System.EventArgs {
            
            private DistinctiveRingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctiveRingRowChangeEvent(DistinctiveRingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctiveRingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StatementTelephoneNumbersRowChangeEvent : System.EventArgs {
            
            private StatementTelephoneNumbersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatementTelephoneNumbersRowChangeEvent(StatementTelephoneNumbersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatementTelephoneNumbersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591