//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Cox.DataAccess.Account {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceabilitySchema")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ServiceabilitySchema : System.Data.DataSet {
        
        private ICOMSAddressesDataTable tableICOMSAddresses;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServiceabilitySchema() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ServiceabilitySchema(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ICOMSAddresses"] != null)) {
                    base.Tables.Add(new ICOMSAddressesDataTable(ds.Tables["ICOMSAddresses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ICOMSAddressesDataTable ICOMSAddresses {
            get {
                return this.tableICOMSAddresses;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ServiceabilitySchema cln = ((ServiceabilitySchema)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ICOMSAddresses"] != null)) {
                    base.Tables.Add(new ICOMSAddressesDataTable(ds.Tables["ICOMSAddresses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableICOMSAddresses = ((ICOMSAddressesDataTable)(base.Tables["ICOMSAddresses"]));
            if ((initTable == true)) {
                if ((this.tableICOMSAddresses != null)) {
                    this.tableICOMSAddresses.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ServiceabilitySchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ServiceabilitySchema.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableICOMSAddresses = new ICOMSAddressesDataTable();
            base.Tables.Add(this.tableICOMSAddresses);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeICOMSAddresses() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ServiceabilitySchema ds = new ServiceabilitySchema();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ICOMSAddressChangeEventHandler(object sender, ICOMSAddressChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ICOMSAddressesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSiteID;
            
            private System.Data.DataColumn columnCompanyNbr;
            
            private System.Data.DataColumn columnDivisionNbr;
            
            private System.Data.DataColumn columnFranchiseID;
            
            private System.Data.DataColumn columnHouseNbr;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnFraction;
            
            private System.Data.DataColumn columnPreDirectional;
            
            private System.Data.DataColumn columnStreetName;
            
            private System.Data.DataColumn columnPostDirectional;
            
            private System.Data.DataColumn columnAddressLine1;
            
            private System.Data.DataColumn columnAddressLine2;
            
            private System.Data.DataColumn columnAddressLine3;
            
            private System.Data.DataColumn columnAddressLine4;
            
            private System.Data.DataColumn columnApt;
            
            private System.Data.DataColumn columnBuilding;
            
            private System.Data.DataColumn columnCity;
            
            private System.Data.DataColumn columnState;
            
            private System.Data.DataColumn columnZip5;
            
            private System.Data.DataColumn columnZip4;
            
            private System.Data.DataColumn columnDwellingType;
            
            private System.Data.DataColumn columnHouseResidentNbr;
            
            private System.Data.DataColumn columnHasCustomer;
            
            private System.Data.DataColumn columnHasBasicCable;
            
            private System.Data.DataColumn columnHasDigitalCable;
            
            private System.Data.DataColumn columnHasHSI;
            
            private System.Data.DataColumn columnHasTelephony;
            
            private System.Data.DataColumn columnHasSwitchedTelephony;
            
            private System.Data.DataColumn columnHasVoipTelephony;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICOMSAddressesDataTable() {
                this.TableName = "ICOMSAddresses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ICOMSAddressesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ICOMSAddressesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SiteIDColumn {
                get {
                    return this.columnSiteID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CompanyNbrColumn {
                get {
                    return this.columnCompanyNbr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DivisionNbrColumn {
                get {
                    return this.columnDivisionNbr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FranchiseIDColumn {
                get {
                    return this.columnFranchiseID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HouseNbrColumn {
                get {
                    return this.columnHouseNbr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FractionColumn {
                get {
                    return this.columnFraction;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PreDirectionalColumn {
                get {
                    return this.columnPreDirectional;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StreetNameColumn {
                get {
                    return this.columnStreetName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PostDirectionalColumn {
                get {
                    return this.columnPostDirectional;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressLine3Column {
                get {
                    return this.columnAddressLine3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressLine4Column {
                get {
                    return this.columnAddressLine4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AptColumn {
                get {
                    return this.columnApt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildingColumn {
                get {
                    return this.columnBuilding;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Zip5Column {
                get {
                    return this.columnZip5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Zip4Column {
                get {
                    return this.columnZip4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DwellingTypeColumn {
                get {
                    return this.columnDwellingType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HouseResidentNbrColumn {
                get {
                    return this.columnHouseResidentNbr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasCustomerColumn {
                get {
                    return this.columnHasCustomer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasBasicCableColumn {
                get {
                    return this.columnHasBasicCable;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasDigitalCableColumn {
                get {
                    return this.columnHasDigitalCable;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasHSIColumn {
                get {
                    return this.columnHasHSI;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasTelephonyColumn {
                get {
                    return this.columnHasTelephony;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasSwitchedTelephonyColumn {
                get {
                    return this.columnHasSwitchedTelephony;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasVoipTelephonyColumn {
                get {
                    return this.columnHasVoipTelephony;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICOMSAddress this[int index] {
                get {
                    return ((ICOMSAddress)(this.Rows[index]));
                }
            }
            
            public event ICOMSAddressChangeEventHandler ICOMSAddressChanging;
            
            public event ICOMSAddressChangeEventHandler ICOMSAddressChanged;
            
            public event ICOMSAddressChangeEventHandler ICOMSAddressDeleting;
            
            public event ICOMSAddressChangeEventHandler ICOMSAddressDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddICOMSAddress(ICOMSAddress row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICOMSAddress AddICOMSAddress(
                        long SiteID, 
                        long CompanyNbr, 
                        long DivisionNbr, 
                        long FranchiseID, 
                        long HouseNbr, 
                        string Number, 
                        string Fraction, 
                        string PreDirectional, 
                        string StreetName, 
                        string PostDirectional, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string AddressLine3, 
                        string AddressLine4, 
                        string Apt, 
                        string Building, 
                        string City, 
                        string State, 
                        string Zip5, 
                        string Zip4, 
                        string DwellingType, 
                        long HouseResidentNbr, 
                        bool HasCustomer, 
                        bool HasBasicCable, 
                        bool HasDigitalCable, 
                        bool HasHSI, 
                        bool HasTelephony, 
                        bool HasSwitchedTelephony, 
                        bool HasVoipTelephony) {
                ICOMSAddress rowICOMSAddress = ((ICOMSAddress)(this.NewRow()));
                rowICOMSAddress.ItemArray = new object[] {
                        SiteID,
                        CompanyNbr,
                        DivisionNbr,
                        FranchiseID,
                        HouseNbr,
                        Number,
                        Fraction,
                        PreDirectional,
                        StreetName,
                        PostDirectional,
                        AddressLine1,
                        AddressLine2,
                        AddressLine3,
                        AddressLine4,
                        Apt,
                        Building,
                        City,
                        State,
                        Zip5,
                        Zip4,
                        DwellingType,
                        HouseResidentNbr,
                        HasCustomer,
                        HasBasicCable,
                        HasDigitalCable,
                        HasHSI,
                        HasTelephony,
                        HasSwitchedTelephony,
                        HasVoipTelephony};
                this.Rows.Add(rowICOMSAddress);
                return rowICOMSAddress;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ICOMSAddressesDataTable cln = ((ICOMSAddressesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ICOMSAddressesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSiteID = base.Columns["SITE_ID"];
                this.columnCompanyNbr = base.Columns["COMPANY_NUMBER"];
                this.columnDivisionNbr = base.Columns["DIVISION_NUMBER"];
                this.columnFranchiseID = base.Columns["FRANCHISE_NUMBER"];
                this.columnHouseNbr = base.Columns["HOUSE_NUMBER"];
                this.columnNumber = base.Columns["ADDR_LOCATION"];
                this.columnFraction = base.Columns["FRACTION"];
                this.columnPreDirectional = base.Columns["PRE_DIRECTIONAL"];
                this.columnStreetName = base.Columns["STREET"];
                this.columnPostDirectional = base.Columns["ADDR_POST_DIRECTIONAL"];
                this.columnAddressLine1 = base.Columns["ADDRESS_LINE_1"];
                this.columnAddressLine2 = base.Columns["ADDRESS_LINE_2"];
                this.columnAddressLine3 = base.Columns["ADDRESS_LINE_3"];
                this.columnAddressLine4 = base.Columns["ADDRESS_LINE_4"];
                this.columnApt = base.Columns["APARTMENT"];
                this.columnBuilding = base.Columns["BUILDING"];
                this.columnCity = base.Columns["ADDR_CITY"];
                this.columnState = base.Columns["ADDR_STATE"];
                this.columnZip5 = base.Columns["ADDR_ZIP_5"];
                this.columnZip4 = base.Columns["ADDR_ZIP_4"];
                this.columnDwellingType = base.Columns["DWELLING_TYPE"];
                this.columnHouseResidentNbr = base.Columns["HOUSE_RESIDENT_NUMBER"];
                this.columnHasCustomer = base.Columns["HasCustomer"];
                this.columnHasBasicCable = base.Columns["HasBasicCable"];
                this.columnHasDigitalCable = base.Columns["HasDigitalCable"];
                this.columnHasHSI = base.Columns["HasHSI"];
                this.columnHasTelephony = base.Columns["HasTelephony"];
                this.columnHasSwitchedTelephony = base.Columns["HasSwitchedTelephony"];
                this.columnHasVoipTelephony = base.Columns["HasVoipTelephony"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSiteID = new System.Data.DataColumn("SITE_ID", typeof(long), null, System.Data.MappingType.Element);
                this.columnSiteID.ExtendedProperties.Add("typedName", "SiteID");
                base.Columns.Add(this.columnSiteID);
                this.columnCompanyNbr = new System.Data.DataColumn("COMPANY_NUMBER", typeof(long), null, System.Data.MappingType.Element);
                this.columnCompanyNbr.ExtendedProperties.Add("typedName", "CompanyNbr");
                base.Columns.Add(this.columnCompanyNbr);
                this.columnDivisionNbr = new System.Data.DataColumn("DIVISION_NUMBER", typeof(long), null, System.Data.MappingType.Element);
                this.columnDivisionNbr.ExtendedProperties.Add("typedName", "DivisionNbr");
                base.Columns.Add(this.columnDivisionNbr);
                this.columnFranchiseID = new System.Data.DataColumn("FRANCHISE_NUMBER", typeof(long), null, System.Data.MappingType.Element);
                this.columnFranchiseID.ExtendedProperties.Add("typedName", "FranchiseID");
                base.Columns.Add(this.columnFranchiseID);
                this.columnHouseNbr = new System.Data.DataColumn("HOUSE_NUMBER", typeof(long), null, System.Data.MappingType.Element);
                this.columnHouseNbr.ExtendedProperties.Add("typedName", "HouseNbr");
                base.Columns.Add(this.columnHouseNbr);
                this.columnNumber = new System.Data.DataColumn("ADDR_LOCATION", typeof(string), null, System.Data.MappingType.Element);
                this.columnNumber.ExtendedProperties.Add("typedName", "Number");
                base.Columns.Add(this.columnNumber);
                this.columnFraction = new System.Data.DataColumn("FRACTION", typeof(string), null, System.Data.MappingType.Element);
                this.columnFraction.ExtendedProperties.Add("typedName", "Fraction");
                base.Columns.Add(this.columnFraction);
                this.columnPreDirectional = new System.Data.DataColumn("PRE_DIRECTIONAL", typeof(string), null, System.Data.MappingType.Element);
                this.columnPreDirectional.ExtendedProperties.Add("typedName", "PreDirectional");
                base.Columns.Add(this.columnPreDirectional);
                this.columnStreetName = new System.Data.DataColumn("STREET", typeof(string), null, System.Data.MappingType.Element);
                this.columnStreetName.ExtendedProperties.Add("typedName", "StreetName");
                base.Columns.Add(this.columnStreetName);
                this.columnPostDirectional = new System.Data.DataColumn("ADDR_POST_DIRECTIONAL", typeof(string), null, System.Data.MappingType.Element);
                this.columnPostDirectional.ExtendedProperties.Add("typedName", "PostDirectional");
                base.Columns.Add(this.columnPostDirectional);
                this.columnAddressLine1 = new System.Data.DataColumn("ADDRESS_LINE_1", typeof(string), null, System.Data.MappingType.Element);
                this.columnAddressLine1.ExtendedProperties.Add("typedName", "AddressLine1");
                base.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new System.Data.DataColumn("ADDRESS_LINE_2", typeof(string), null, System.Data.MappingType.Element);
                this.columnAddressLine2.ExtendedProperties.Add("typedName", "AddressLine2");
                base.Columns.Add(this.columnAddressLine2);
                this.columnAddressLine3 = new System.Data.DataColumn("ADDRESS_LINE_3", typeof(string), null, System.Data.MappingType.Element);
                this.columnAddressLine3.ExtendedProperties.Add("typedName", "AddressLine3");
                base.Columns.Add(this.columnAddressLine3);
                this.columnAddressLine4 = new System.Data.DataColumn("ADDRESS_LINE_4", typeof(string), null, System.Data.MappingType.Element);
                this.columnAddressLine4.ExtendedProperties.Add("typedName", "AddressLine4");
                base.Columns.Add(this.columnAddressLine4);
                this.columnApt = new System.Data.DataColumn("APARTMENT", typeof(string), null, System.Data.MappingType.Element);
                this.columnApt.ExtendedProperties.Add("typedName", "Apt");
                base.Columns.Add(this.columnApt);
                this.columnBuilding = new System.Data.DataColumn("BUILDING", typeof(string), null, System.Data.MappingType.Element);
                this.columnBuilding.ExtendedProperties.Add("typedName", "Building");
                base.Columns.Add(this.columnBuilding);
                this.columnCity = new System.Data.DataColumn("ADDR_CITY", typeof(string), null, System.Data.MappingType.Element);
                this.columnCity.ExtendedProperties.Add("typedName", "City");
                base.Columns.Add(this.columnCity);
                this.columnState = new System.Data.DataColumn("ADDR_STATE", typeof(string), null, System.Data.MappingType.Element);
                this.columnState.ExtendedProperties.Add("typedName", "State");
                base.Columns.Add(this.columnState);
                this.columnZip5 = new System.Data.DataColumn("ADDR_ZIP_5", typeof(string), null, System.Data.MappingType.Element);
                this.columnZip5.ExtendedProperties.Add("typedName", "Zip5");
                base.Columns.Add(this.columnZip5);
                this.columnZip4 = new System.Data.DataColumn("ADDR_ZIP_4", typeof(string), null, System.Data.MappingType.Element);
                this.columnZip4.ExtendedProperties.Add("typedName", "Zip4");
                base.Columns.Add(this.columnZip4);
                this.columnDwellingType = new System.Data.DataColumn("DWELLING_TYPE", typeof(string), null, System.Data.MappingType.Element);
                this.columnDwellingType.ExtendedProperties.Add("typedName", "DwellingType");
                base.Columns.Add(this.columnDwellingType);
                this.columnHouseResidentNbr = new System.Data.DataColumn("HOUSE_RESIDENT_NUMBER", typeof(long), null, System.Data.MappingType.Element);
                this.columnHouseResidentNbr.ExtendedProperties.Add("typedName", "HouseResidentNbr");
                base.Columns.Add(this.columnHouseResidentNbr);
                this.columnHasCustomer = new System.Data.DataColumn("HasCustomer", typeof(bool), null, System.Data.MappingType.Element);
                this.columnHasCustomer.ExtendedProperties.Add("typedName", "HasCustomer");
                base.Columns.Add(this.columnHasCustomer);
                this.columnHasBasicCable = new System.Data.DataColumn("HasBasicCable", typeof(bool), null, System.Data.MappingType.Element);
                this.columnHasBasicCable.ExtendedProperties.Add("typedName", "HasBasicCable");
                base.Columns.Add(this.columnHasBasicCable);
                this.columnHasDigitalCable = new System.Data.DataColumn("HasDigitalCable", typeof(bool), null, System.Data.MappingType.Element);
                this.columnHasDigitalCable.ExtendedProperties.Add("typedName", "HasDigitalCable");
                base.Columns.Add(this.columnHasDigitalCable);
                this.columnHasHSI = new System.Data.DataColumn("HasHSI", typeof(bool), null, System.Data.MappingType.Element);
                this.columnHasHSI.ExtendedProperties.Add("typedName", "HasHSI");
                base.Columns.Add(this.columnHasHSI);
                this.columnHasTelephony = new System.Data.DataColumn("HasTelephony", typeof(bool), null, System.Data.MappingType.Element);
                this.columnHasTelephony.ExtendedProperties.Add("typedName", "HasTelephony");
                base.Columns.Add(this.columnHasTelephony);
                this.columnHasSwitchedTelephony = new System.Data.DataColumn("HasSwitchedTelephony", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasSwitchedTelephony);
                this.columnHasVoipTelephony = new System.Data.DataColumn("HasVoipTelephony", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasVoipTelephony);
                this.ExtendedProperties.Add("typedName", "ICOMSAddress");
                this.ExtendedProperties.Add("typedPlural", "ICOMSAddresses");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICOMSAddress NewICOMSAddress() {
                return ((ICOMSAddress)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ICOMSAddress(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ICOMSAddress);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ICOMSAddressChanged != null)) {
                    this.ICOMSAddressChanged(this, new ICOMSAddressChangeEvent(((ICOMSAddress)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ICOMSAddressChanging != null)) {
                    this.ICOMSAddressChanging(this, new ICOMSAddressChangeEvent(((ICOMSAddress)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ICOMSAddressDeleted != null)) {
                    this.ICOMSAddressDeleted(this, new ICOMSAddressChangeEvent(((ICOMSAddress)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ICOMSAddressDeleting != null)) {
                    this.ICOMSAddressDeleting(this, new ICOMSAddressChangeEvent(((ICOMSAddress)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveICOMSAddress(ICOMSAddress row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServiceabilitySchema ds = new ServiceabilitySchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ICOMSAddressesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ICOMSAddress : System.Data.DataRow {
            
            private ICOMSAddressesDataTable tableICOMSAddresses;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ICOMSAddress(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableICOMSAddresses = ((ICOMSAddressesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SiteID {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.SiteIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SITE_ID\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.SiteIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CompanyNbr {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.CompanyNbrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'COMPANY_NUMBER\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.CompanyNbrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DivisionNbr {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.DivisionNbrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DIVISION_NUMBER\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.DivisionNbrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long FranchiseID {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.FranchiseIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FRANCHISE_NUMBER\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.FranchiseIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long HouseNbr {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.HouseNbrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HOUSE_NUMBER\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HouseNbrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDR_LOCATION\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fraction {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.FractionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FRACTION\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.FractionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreDirectional {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.PreDirectionalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRE_DIRECTIONAL\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.PreDirectionalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StreetName {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.StreetNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STREET\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.StreetNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostDirectional {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.PostDirectionalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDR_POST_DIRECTIONAL\' in table \'ICOMSAddresses\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.PostDirectionalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AddressLine1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDRESS_LINE_1\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AddressLine1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AddressLine2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDRESS_LINE_2\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AddressLine2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressLine3 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AddressLine3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDRESS_LINE_3\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AddressLine3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressLine4 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AddressLine4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDRESS_LINE_4\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AddressLine4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Apt {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AptColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'APARTMENT\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Building {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.BuildingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BUILDING\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.BuildingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.CityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDR_CITY\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.CityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.StateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDR_STATE\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.StateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip5 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.Zip5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDR_ZIP_5\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.Zip5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip4 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.Zip4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDR_ZIP_4\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.Zip4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DwellingType {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.DwellingTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DWELLING_TYPE\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.DwellingTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long HouseResidentNbr {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.HouseResidentNbrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HOUSE_RESIDENT_NUMBER\' in table \'ICOMSAddresses\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HouseResidentNbrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasCustomer {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasCustomerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasCustomer\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasCustomerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasBasicCable {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasBasicCableColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasBasicCable\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasBasicCableColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasDigitalCable {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasDigitalCableColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasDigitalCable\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasDigitalCableColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasHSI {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasHSIColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasHSI\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasHSIColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasTelephony {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasTelephonyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasTelephony\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasTelephonyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasSwitchedTelephony {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasSwitchedTelephonyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasSwitchedTelephony\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasSwitchedTelephonyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasVoipTelephony {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasVoipTelephonyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasVoipTelephony\' in table \'ICOMSAddresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasVoipTelephonyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteIDNull() {
                return this.IsNull(this.tableICOMSAddresses.SiteIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteIDNull() {
                this[this.tableICOMSAddresses.SiteIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNbrNull() {
                return this.IsNull(this.tableICOMSAddresses.CompanyNbrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNbrNull() {
                this[this.tableICOMSAddresses.CompanyNbrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivisionNbrNull() {
                return this.IsNull(this.tableICOMSAddresses.DivisionNbrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivisionNbrNull() {
                this[this.tableICOMSAddresses.DivisionNbrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFranchiseIDNull() {
                return this.IsNull(this.tableICOMSAddresses.FranchiseIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFranchiseIDNull() {
                this[this.tableICOMSAddresses.FranchiseIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHouseNbrNull() {
                return this.IsNull(this.tableICOMSAddresses.HouseNbrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHouseNbrNull() {
                this[this.tableICOMSAddresses.HouseNbrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableICOMSAddresses.NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableICOMSAddresses.NumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionNull() {
                return this.IsNull(this.tableICOMSAddresses.FractionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionNull() {
                this[this.tableICOMSAddresses.FractionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreDirectionalNull() {
                return this.IsNull(this.tableICOMSAddresses.PreDirectionalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreDirectionalNull() {
                this[this.tableICOMSAddresses.PreDirectionalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNameNull() {
                return this.IsNull(this.tableICOMSAddresses.StreetNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNameNull() {
                this[this.tableICOMSAddresses.StreetNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostDirectionalNull() {
                return this.IsNull(this.tableICOMSAddresses.PostDirectionalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostDirectionalNull() {
                this[this.tableICOMSAddresses.PostDirectionalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableICOMSAddresses.AddressLine1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressLine1Null() {
                this[this.tableICOMSAddresses.AddressLine1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableICOMSAddresses.AddressLine2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressLine2Null() {
                this[this.tableICOMSAddresses.AddressLine2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressLine3Null() {
                return this.IsNull(this.tableICOMSAddresses.AddressLine3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressLine3Null() {
                this[this.tableICOMSAddresses.AddressLine3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressLine4Null() {
                return this.IsNull(this.tableICOMSAddresses.AddressLine4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressLine4Null() {
                this[this.tableICOMSAddresses.AddressLine4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAptNull() {
                return this.IsNull(this.tableICOMSAddresses.AptColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAptNull() {
                this[this.tableICOMSAddresses.AptColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildingNull() {
                return this.IsNull(this.tableICOMSAddresses.BuildingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildingNull() {
                this[this.tableICOMSAddresses.BuildingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableICOMSAddresses.CityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableICOMSAddresses.CityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableICOMSAddresses.StateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableICOMSAddresses.StateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZip5Null() {
                return this.IsNull(this.tableICOMSAddresses.Zip5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZip5Null() {
                this[this.tableICOMSAddresses.Zip5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZip4Null() {
                return this.IsNull(this.tableICOMSAddresses.Zip4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZip4Null() {
                this[this.tableICOMSAddresses.Zip4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDwellingTypeNull() {
                return this.IsNull(this.tableICOMSAddresses.DwellingTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDwellingTypeNull() {
                this[this.tableICOMSAddresses.DwellingTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHouseResidentNbrNull() {
                return this.IsNull(this.tableICOMSAddresses.HouseResidentNbrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHouseResidentNbrNull() {
                this[this.tableICOMSAddresses.HouseResidentNbrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasCustomerNull() {
                return this.IsNull(this.tableICOMSAddresses.HasCustomerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasCustomerNull() {
                this[this.tableICOMSAddresses.HasCustomerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasBasicCableNull() {
                return this.IsNull(this.tableICOMSAddresses.HasBasicCableColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasBasicCableNull() {
                this[this.tableICOMSAddresses.HasBasicCableColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasDigitalCableNull() {
                return this.IsNull(this.tableICOMSAddresses.HasDigitalCableColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasDigitalCableNull() {
                this[this.tableICOMSAddresses.HasDigitalCableColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasHSINull() {
                return this.IsNull(this.tableICOMSAddresses.HasHSIColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasHSINull() {
                this[this.tableICOMSAddresses.HasHSIColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasTelephonyNull() {
                return this.IsNull(this.tableICOMSAddresses.HasTelephonyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasTelephonyNull() {
                this[this.tableICOMSAddresses.HasTelephonyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasSwitchedTelephonyNull() {
                return this.IsNull(this.tableICOMSAddresses.HasSwitchedTelephonyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasSwitchedTelephonyNull() {
                this[this.tableICOMSAddresses.HasSwitchedTelephonyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasVoipTelephonyNull() {
                return this.IsNull(this.tableICOMSAddresses.HasVoipTelephonyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasVoipTelephonyNull() {
                this[this.tableICOMSAddresses.HasVoipTelephonyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ICOMSAddressChangeEvent : System.EventArgs {
            
            private ICOMSAddress eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICOMSAddressChangeEvent(ICOMSAddress row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICOMSAddress Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591