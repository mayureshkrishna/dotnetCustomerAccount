//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Cox.DataAccess.Account {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ServiceabilitySchema : DataSet {
        
        private ICOMSAddressesDataTable tableICOMSAddresses;
        
        public ServiceabilitySchema() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ServiceabilitySchema(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ICOMSAddresses"] != null)) {
                    this.Tables.Add(new ICOMSAddressesDataTable(ds.Tables["ICOMSAddresses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ICOMSAddressesDataTable ICOMSAddresses {
            get {
                return this.tableICOMSAddresses;
            }
        }
        
        public override DataSet Clone() {
            ServiceabilitySchema cln = ((ServiceabilitySchema)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ICOMSAddresses"] != null)) {
                this.Tables.Add(new ICOMSAddressesDataTable(ds.Tables["ICOMSAddresses"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableICOMSAddresses = ((ICOMSAddressesDataTable)(this.Tables["ICOMSAddresses"]));
            if ((this.tableICOMSAddresses != null)) {
                this.tableICOMSAddresses.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ServiceabilitySchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ServiceabilitySchema.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableICOMSAddresses = new ICOMSAddressesDataTable();
            this.Tables.Add(this.tableICOMSAddresses);
        }
        
        private bool ShouldSerializeICOMSAddresses() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ICOMSAddressChangeEventHandler(object sender, ICOMSAddressChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ICOMSAddressesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSiteID;
            
            private DataColumn columnCompanyNbr;
            
            private DataColumn columnDivisionNbr;
            
            private DataColumn columnFranchiseID;
            
            private DataColumn columnHouseNbr;
            
            private DataColumn columnNumber;
            
            private DataColumn columnFraction;
            
            private DataColumn columnPreDirectional;
            
            private DataColumn columnStreetName;
            
            private DataColumn columnPostDirectional;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnAddressLine3;
            
            private DataColumn columnAddressLine4;
            
            private DataColumn columnApt;
            
            private DataColumn columnBuilding;
            
            private DataColumn columnCity;
            
            private DataColumn columnState;
            
            private DataColumn columnZip5;
            
            private DataColumn columnZip4;
            
            private DataColumn columnDwellingType;
            
            private DataColumn columnHasBasicCable;
            
            private DataColumn columnHasDigitalCable;
            
            private DataColumn columnHasHSI;
            
            private DataColumn columnHasTelephony;
            
            internal ICOMSAddressesDataTable() : 
                    base("ICOMSAddresses") {
                this.InitClass();
            }
            
            internal ICOMSAddressesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SiteIDColumn {
                get {
                    return this.columnSiteID;
                }
            }
            
            internal DataColumn CompanyNbrColumn {
                get {
                    return this.columnCompanyNbr;
                }
            }
            
            internal DataColumn DivisionNbrColumn {
                get {
                    return this.columnDivisionNbr;
                }
            }
            
            internal DataColumn FranchiseIDColumn {
                get {
                    return this.columnFranchiseID;
                }
            }
            
            internal DataColumn HouseNbrColumn {
                get {
                    return this.columnHouseNbr;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn FractionColumn {
                get {
                    return this.columnFraction;
                }
            }
            
            internal DataColumn PreDirectionalColumn {
                get {
                    return this.columnPreDirectional;
                }
            }
            
            internal DataColumn StreetNameColumn {
                get {
                    return this.columnStreetName;
                }
            }
            
            internal DataColumn PostDirectionalColumn {
                get {
                    return this.columnPostDirectional;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn AddressLine3Column {
                get {
                    return this.columnAddressLine3;
                }
            }
            
            internal DataColumn AddressLine4Column {
                get {
                    return this.columnAddressLine4;
                }
            }
            
            internal DataColumn AptColumn {
                get {
                    return this.columnApt;
                }
            }
            
            internal DataColumn BuildingColumn {
                get {
                    return this.columnBuilding;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn Zip5Column {
                get {
                    return this.columnZip5;
                }
            }
            
            internal DataColumn Zip4Column {
                get {
                    return this.columnZip4;
                }
            }
            
            internal DataColumn DwellingTypeColumn {
                get {
                    return this.columnDwellingType;
                }
            }
            
            internal DataColumn HasBasicCableColumn {
                get {
                    return this.columnHasBasicCable;
                }
            }
            
            internal DataColumn HasDigitalCableColumn {
                get {
                    return this.columnHasDigitalCable;
                }
            }
            
            internal DataColumn HasHSIColumn {
                get {
                    return this.columnHasHSI;
                }
            }
            
            internal DataColumn HasTelephonyColumn {
                get {
                    return this.columnHasTelephony;
                }
            }
            
            public ICOMSAddress this[int index] {
                get {
                    return ((ICOMSAddress)(this.Rows[index]));
                }
            }
            
            public event ICOMSAddressChangeEventHandler ICOMSAddressChanged;
            
            public event ICOMSAddressChangeEventHandler ICOMSAddressChanging;
            
            public event ICOMSAddressChangeEventHandler ICOMSAddressDeleted;
            
            public event ICOMSAddressChangeEventHandler ICOMSAddressDeleting;
            
            public void AddICOMSAddress(ICOMSAddress row) {
                this.Rows.Add(row);
            }
            
            public ICOMSAddress AddICOMSAddress(
                        long SiteID, 
                        long CompanyNbr, 
                        long DivisionNbr, 
                        long FranchiseID, 
                        long HouseNbr, 
                        string Number, 
                        string Fraction, 
                        string PreDirectional, 
                        string StreetName, 
                        string PostDirectional, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string AddressLine3, 
                        string AddressLine4, 
                        string Apt, 
                        string Building, 
                        string City, 
                        string State, 
                        string Zip5, 
                        string Zip4, 
                        string DwellingType, 
                        bool HasBasicCable, 
                        bool HasDigitalCable, 
                        bool HasHSI, 
                        bool HasTelephony) {
                ICOMSAddress rowICOMSAddress = ((ICOMSAddress)(this.NewRow()));
                rowICOMSAddress.ItemArray = new object[] {
                        SiteID,
                        CompanyNbr,
                        DivisionNbr,
                        FranchiseID,
                        HouseNbr,
                        Number,
                        Fraction,
                        PreDirectional,
                        StreetName,
                        PostDirectional,
                        AddressLine1,
                        AddressLine2,
                        AddressLine3,
                        AddressLine4,
                        Apt,
                        Building,
                        City,
                        State,
                        Zip5,
                        Zip4,
                        DwellingType,
                        HasBasicCable,
                        HasDigitalCable,
                        HasHSI,
                        HasTelephony};
                this.Rows.Add(rowICOMSAddress);
                return rowICOMSAddress;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ICOMSAddressesDataTable cln = ((ICOMSAddressesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ICOMSAddressesDataTable();
            }
            
            internal void InitVars() {
                this.columnSiteID = this.Columns["SITE_ID"];
                this.columnCompanyNbr = this.Columns["COMPANY_NUMBER"];
                this.columnDivisionNbr = this.Columns["DIVISION_NUMBER"];
                this.columnFranchiseID = this.Columns["FRANCHISE_NUMBER"];
                this.columnHouseNbr = this.Columns["HOUSE_NUMBER"];
                this.columnNumber = this.Columns["ADDR_LOCATION"];
                this.columnFraction = this.Columns["FRACTION"];
                this.columnPreDirectional = this.Columns["PRE_DIRECTIONAL"];
                this.columnStreetName = this.Columns["STREET"];
                this.columnPostDirectional = this.Columns["ADDR_POST_DIRECTIONAL"];
                this.columnAddressLine1 = this.Columns["ADDRESS_LINE_1"];
                this.columnAddressLine2 = this.Columns["ADDRESS_LINE_2"];
                this.columnAddressLine3 = this.Columns["ADDRESS_LINE_3"];
                this.columnAddressLine4 = this.Columns["ADDRESS_LINE_4"];
                this.columnApt = this.Columns["APARTMENT"];
                this.columnBuilding = this.Columns["BUILDING"];
                this.columnCity = this.Columns["ADDR_CITY"];
                this.columnState = this.Columns["ADDR_STATE"];
                this.columnZip5 = this.Columns["ADDR_ZIP_5"];
                this.columnZip4 = this.Columns["ADDR_ZIP_4"];
                this.columnDwellingType = this.Columns["DWELLING_TYPE"];
                this.columnHasBasicCable = this.Columns["HasBasicCable"];
                this.columnHasDigitalCable = this.Columns["HasDigitalCable"];
                this.columnHasHSI = this.Columns["HasHSI"];
                this.columnHasTelephony = this.Columns["HasTelephony"];
            }
            
            private void InitClass() {
                this.columnSiteID = new DataColumn("SITE_ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSiteID);
                this.columnCompanyNbr = new DataColumn("COMPANY_NUMBER", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyNbr);
                this.columnDivisionNbr = new DataColumn("DIVISION_NUMBER", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDivisionNbr);
                this.columnFranchiseID = new DataColumn("FRANCHISE_NUMBER", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFranchiseID);
                this.columnHouseNbr = new DataColumn("HOUSE_NUMBER", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHouseNbr);
                this.columnNumber = new DataColumn("ADDR_LOCATION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnFraction = new DataColumn("FRACTION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFraction);
                this.columnPreDirectional = new DataColumn("PRE_DIRECTIONAL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreDirectional);
                this.columnStreetName = new DataColumn("STREET", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStreetName);
                this.columnPostDirectional = new DataColumn("ADDR_POST_DIRECTIONAL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostDirectional);
                this.columnAddressLine1 = new DataColumn("ADDRESS_LINE_1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("ADDRESS_LINE_2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnAddressLine3 = new DataColumn("ADDRESS_LINE_3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine3);
                this.columnAddressLine4 = new DataColumn("ADDRESS_LINE_4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine4);
                this.columnApt = new DataColumn("APARTMENT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApt);
                this.columnBuilding = new DataColumn("BUILDING", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBuilding);
                this.columnCity = new DataColumn("ADDR_CITY", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnState = new DataColumn("ADDR_STATE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.columnZip5 = new DataColumn("ADDR_ZIP_5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZip5);
                this.columnZip4 = new DataColumn("ADDR_ZIP_4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZip4);
                this.columnDwellingType = new DataColumn("DWELLING_TYPE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDwellingType);
                this.columnHasBasicCable = new DataColumn("HasBasicCable", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHasBasicCable);
                this.columnHasDigitalCable = new DataColumn("HasDigitalCable", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHasDigitalCable);
                this.columnHasHSI = new DataColumn("HasHSI", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHasHSI);
                this.columnHasTelephony = new DataColumn("HasTelephony", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHasTelephony);
            }
            
            public ICOMSAddress NewICOMSAddress() {
                return ((ICOMSAddress)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ICOMSAddress(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ICOMSAddress);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ICOMSAddressChanged != null)) {
                    this.ICOMSAddressChanged(this, new ICOMSAddressChangeEvent(((ICOMSAddress)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ICOMSAddressChanging != null)) {
                    this.ICOMSAddressChanging(this, new ICOMSAddressChangeEvent(((ICOMSAddress)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ICOMSAddressDeleted != null)) {
                    this.ICOMSAddressDeleted(this, new ICOMSAddressChangeEvent(((ICOMSAddress)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ICOMSAddressDeleting != null)) {
                    this.ICOMSAddressDeleting(this, new ICOMSAddressChangeEvent(((ICOMSAddress)(e.Row)), e.Action));
                }
            }
            
            public void RemoveICOMSAddress(ICOMSAddress row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ICOMSAddress : DataRow {
            
            private ICOMSAddressesDataTable tableICOMSAddresses;
            
            internal ICOMSAddress(DataRowBuilder rb) : 
                    base(rb) {
                this.tableICOMSAddresses = ((ICOMSAddressesDataTable)(this.Table));
            }
            
            public long SiteID {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.SiteIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.SiteIDColumn] = value;
                }
            }
            
            public long CompanyNbr {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.CompanyNbrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.CompanyNbrColumn] = value;
                }
            }
            
            public long DivisionNbr {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.DivisionNbrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.DivisionNbrColumn] = value;
                }
            }
            
            public long FranchiseID {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.FranchiseIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.FranchiseIDColumn] = value;
                }
            }
            
            public long HouseNbr {
                get {
                    try {
                        return ((long)(this[this.tableICOMSAddresses.HouseNbrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HouseNbrColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.NumberColumn] = value;
                }
            }
            
            public string Fraction {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.FractionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.FractionColumn] = value;
                }
            }
            
            public string PreDirectional {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.PreDirectionalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.PreDirectionalColumn] = value;
                }
            }
            
            public string StreetName {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.StreetNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.StreetNameColumn] = value;
                }
            }
            
            public string PostDirectional {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.PostDirectionalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.PostDirectionalColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AddressLine2Column] = value;
                }
            }
            
            public string AddressLine3 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AddressLine3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AddressLine3Column] = value;
                }
            }
            
            public string AddressLine4 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AddressLine4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AddressLine4Column] = value;
                }
            }
            
            public string Apt {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.AptColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.AptColumn] = value;
                }
            }
            
            public string Building {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.BuildingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.BuildingColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.CityColumn] = value;
                }
            }
            
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.StateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.StateColumn] = value;
                }
            }
            
            public string Zip5 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.Zip5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.Zip5Column] = value;
                }
            }
            
            public string Zip4 {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.Zip4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.Zip4Column] = value;
                }
            }
            
            public string DwellingType {
                get {
                    try {
                        return ((string)(this[this.tableICOMSAddresses.DwellingTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.DwellingTypeColumn] = value;
                }
            }
            
            public bool HasBasicCable {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasBasicCableColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasBasicCableColumn] = value;
                }
            }
            
            public bool HasDigitalCable {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasDigitalCableColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasDigitalCableColumn] = value;
                }
            }
            
            public bool HasHSI {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasHSIColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasHSIColumn] = value;
                }
            }
            
            public bool HasTelephony {
                get {
                    try {
                        return ((bool)(this[this.tableICOMSAddresses.HasTelephonyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICOMSAddresses.HasTelephonyColumn] = value;
                }
            }
            
            public bool IsSiteIDNull() {
                return this.IsNull(this.tableICOMSAddresses.SiteIDColumn);
            }
            
            public void SetSiteIDNull() {
                this[this.tableICOMSAddresses.SiteIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyNbrNull() {
                return this.IsNull(this.tableICOMSAddresses.CompanyNbrColumn);
            }
            
            public void SetCompanyNbrNull() {
                this[this.tableICOMSAddresses.CompanyNbrColumn] = System.Convert.DBNull;
            }
            
            public bool IsDivisionNbrNull() {
                return this.IsNull(this.tableICOMSAddresses.DivisionNbrColumn);
            }
            
            public void SetDivisionNbrNull() {
                this[this.tableICOMSAddresses.DivisionNbrColumn] = System.Convert.DBNull;
            }
            
            public bool IsFranchiseIDNull() {
                return this.IsNull(this.tableICOMSAddresses.FranchiseIDColumn);
            }
            
            public void SetFranchiseIDNull() {
                this[this.tableICOMSAddresses.FranchiseIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsHouseNbrNull() {
                return this.IsNull(this.tableICOMSAddresses.HouseNbrColumn);
            }
            
            public void SetHouseNbrNull() {
                this[this.tableICOMSAddresses.HouseNbrColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableICOMSAddresses.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableICOMSAddresses.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsFractionNull() {
                return this.IsNull(this.tableICOMSAddresses.FractionColumn);
            }
            
            public void SetFractionNull() {
                this[this.tableICOMSAddresses.FractionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreDirectionalNull() {
                return this.IsNull(this.tableICOMSAddresses.PreDirectionalColumn);
            }
            
            public void SetPreDirectionalNull() {
                this[this.tableICOMSAddresses.PreDirectionalColumn] = System.Convert.DBNull;
            }
            
            public bool IsStreetNameNull() {
                return this.IsNull(this.tableICOMSAddresses.StreetNameColumn);
            }
            
            public void SetStreetNameNull() {
                this[this.tableICOMSAddresses.StreetNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostDirectionalNull() {
                return this.IsNull(this.tableICOMSAddresses.PostDirectionalColumn);
            }
            
            public void SetPostDirectionalNull() {
                this[this.tableICOMSAddresses.PostDirectionalColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableICOMSAddresses.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableICOMSAddresses.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableICOMSAddresses.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableICOMSAddresses.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine3Null() {
                return this.IsNull(this.tableICOMSAddresses.AddressLine3Column);
            }
            
            public void SetAddressLine3Null() {
                this[this.tableICOMSAddresses.AddressLine3Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine4Null() {
                return this.IsNull(this.tableICOMSAddresses.AddressLine4Column);
            }
            
            public void SetAddressLine4Null() {
                this[this.tableICOMSAddresses.AddressLine4Column] = System.Convert.DBNull;
            }
            
            public bool IsAptNull() {
                return this.IsNull(this.tableICOMSAddresses.AptColumn);
            }
            
            public void SetAptNull() {
                this[this.tableICOMSAddresses.AptColumn] = System.Convert.DBNull;
            }
            
            public bool IsBuildingNull() {
                return this.IsNull(this.tableICOMSAddresses.BuildingColumn);
            }
            
            public void SetBuildingNull() {
                this[this.tableICOMSAddresses.BuildingColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableICOMSAddresses.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableICOMSAddresses.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNull() {
                return this.IsNull(this.tableICOMSAddresses.StateColumn);
            }
            
            public void SetStateNull() {
                this[this.tableICOMSAddresses.StateColumn] = System.Convert.DBNull;
            }
            
            public bool IsZip5Null() {
                return this.IsNull(this.tableICOMSAddresses.Zip5Column);
            }
            
            public void SetZip5Null() {
                this[this.tableICOMSAddresses.Zip5Column] = System.Convert.DBNull;
            }
            
            public bool IsZip4Null() {
                return this.IsNull(this.tableICOMSAddresses.Zip4Column);
            }
            
            public void SetZip4Null() {
                this[this.tableICOMSAddresses.Zip4Column] = System.Convert.DBNull;
            }
            
            public bool IsDwellingTypeNull() {
                return this.IsNull(this.tableICOMSAddresses.DwellingTypeColumn);
            }
            
            public void SetDwellingTypeNull() {
                this[this.tableICOMSAddresses.DwellingTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsHasBasicCableNull() {
                return this.IsNull(this.tableICOMSAddresses.HasBasicCableColumn);
            }
            
            public void SetHasBasicCableNull() {
                this[this.tableICOMSAddresses.HasBasicCableColumn] = System.Convert.DBNull;
            }
            
            public bool IsHasDigitalCableNull() {
                return this.IsNull(this.tableICOMSAddresses.HasDigitalCableColumn);
            }
            
            public void SetHasDigitalCableNull() {
                this[this.tableICOMSAddresses.HasDigitalCableColumn] = System.Convert.DBNull;
            }
            
            public bool IsHasHSINull() {
                return this.IsNull(this.tableICOMSAddresses.HasHSIColumn);
            }
            
            public void SetHasHSINull() {
                this[this.tableICOMSAddresses.HasHSIColumn] = System.Convert.DBNull;
            }
            
            public bool IsHasTelephonyNull() {
                return this.IsNull(this.tableICOMSAddresses.HasTelephonyColumn);
            }
            
            public void SetHasTelephonyNull() {
                this[this.tableICOMSAddresses.HasTelephonyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ICOMSAddressChangeEvent : EventArgs {
            
            private ICOMSAddress eventRow;
            
            private DataRowAction eventAction;
            
            public ICOMSAddressChangeEvent(ICOMSAddress row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ICOMSAddress Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
