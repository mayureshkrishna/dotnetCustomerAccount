//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Cox.DataAccess.Account {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("EquipmentSchema")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EquipmentSchema : System.Data.DataSet {
        
        private ActivePpvEventsDataTable tableActivePpvEvents;
        
        private CustomerEquipmentDataTable tableCustomerEquipment;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EquipmentSchema() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EquipmentSchema(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ActivePpvEvents"] != null)) {
                    base.Tables.Add(new ActivePpvEventsDataTable(ds.Tables["ActivePpvEvents"]));
                }
                if ((ds.Tables["CustomerEquipment"] != null)) {
                    base.Tables.Add(new CustomerEquipmentDataTable(ds.Tables["CustomerEquipment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActivePpvEventsDataTable ActivePpvEvents {
            get {
                return this.tableActivePpvEvents;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerEquipmentDataTable CustomerEquipment {
            get {
                return this.tableCustomerEquipment;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            EquipmentSchema cln = ((EquipmentSchema)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ActivePpvEvents"] != null)) {
                    base.Tables.Add(new ActivePpvEventsDataTable(ds.Tables["ActivePpvEvents"]));
                }
                if ((ds.Tables["CustomerEquipment"] != null)) {
                    base.Tables.Add(new CustomerEquipmentDataTable(ds.Tables["CustomerEquipment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableActivePpvEvents = ((ActivePpvEventsDataTable)(base.Tables["ActivePpvEvents"]));
            if ((initTable == true)) {
                if ((this.tableActivePpvEvents != null)) {
                    this.tableActivePpvEvents.InitVars();
                }
            }
            this.tableCustomerEquipment = ((CustomerEquipmentDataTable)(base.Tables["CustomerEquipment"]));
            if ((initTable == true)) {
                if ((this.tableCustomerEquipment != null)) {
                    this.tableCustomerEquipment.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EquipmentSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EquipmentSchema.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableActivePpvEvents = new ActivePpvEventsDataTable();
            base.Tables.Add(this.tableActivePpvEvents);
            this.tableCustomerEquipment = new CustomerEquipmentDataTable();
            base.Tables.Add(this.tableCustomerEquipment);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActivePpvEvents() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomerEquipment() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            EquipmentSchema ds = new EquipmentSchema();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ActivePpvEventsRowChangeEventHandler(object sender, ActivePpvEventsRowChangeEvent e);
        
        public delegate void CustomerEquipmentRowChangeEventHandler(object sender, CustomerEquipmentRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActivePpvEventsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSERIAL_NUMBER;
            
            private System.Data.DataColumn columnEVENT_TITLE;
            
            private System.Data.DataColumn columnEVENT_START_DATE;
            
            private System.Data.DataColumn columnEVENT_START_TIME;
            
            private System.Data.DataColumn columnEND_DATE;
            
            private System.Data.DataColumn columnEND_TIME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivePpvEventsDataTable() {
                this.TableName = "ActivePpvEvents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActivePpvEventsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActivePpvEventsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SERIAL_NUMBERColumn {
                get {
                    return this.columnSERIAL_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EVENT_TITLEColumn {
                get {
                    return this.columnEVENT_TITLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EVENT_START_DATEColumn {
                get {
                    return this.columnEVENT_START_DATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EVENT_START_TIMEColumn {
                get {
                    return this.columnEVENT_START_TIME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn END_DATEColumn {
                get {
                    return this.columnEND_DATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn END_TIMEColumn {
                get {
                    return this.columnEND_TIME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivePpvEventsRow this[int index] {
                get {
                    return ((ActivePpvEventsRow)(this.Rows[index]));
                }
            }
            
            public event ActivePpvEventsRowChangeEventHandler ActivePpvEventsRowChanging;
            
            public event ActivePpvEventsRowChangeEventHandler ActivePpvEventsRowChanged;
            
            public event ActivePpvEventsRowChangeEventHandler ActivePpvEventsRowDeleting;
            
            public event ActivePpvEventsRowChangeEventHandler ActivePpvEventsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActivePpvEventsRow(ActivePpvEventsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivePpvEventsRow AddActivePpvEventsRow(string SERIAL_NUMBER, string EVENT_TITLE, decimal EVENT_START_DATE, decimal EVENT_START_TIME, decimal END_DATE, decimal END_TIME) {
                ActivePpvEventsRow rowActivePpvEventsRow = ((ActivePpvEventsRow)(this.NewRow()));
                rowActivePpvEventsRow.ItemArray = new object[] {
                        SERIAL_NUMBER,
                        EVENT_TITLE,
                        EVENT_START_DATE,
                        EVENT_START_TIME,
                        END_DATE,
                        END_TIME};
                this.Rows.Add(rowActivePpvEventsRow);
                return rowActivePpvEventsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ActivePpvEventsDataTable cln = ((ActivePpvEventsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ActivePpvEventsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSERIAL_NUMBER = base.Columns["SERIAL_NUMBER"];
                this.columnEVENT_TITLE = base.Columns["EVENT_TITLE"];
                this.columnEVENT_START_DATE = base.Columns["EVENT_START_DATE"];
                this.columnEVENT_START_TIME = base.Columns["EVENT_START_TIME"];
                this.columnEND_DATE = base.Columns["END_DATE"];
                this.columnEND_TIME = base.Columns["END_TIME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSERIAL_NUMBER = new System.Data.DataColumn("SERIAL_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERIAL_NUMBER);
                this.columnEVENT_TITLE = new System.Data.DataColumn("EVENT_TITLE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEVENT_TITLE);
                this.columnEVENT_START_DATE = new System.Data.DataColumn("EVENT_START_DATE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEVENT_START_DATE);
                this.columnEVENT_START_TIME = new System.Data.DataColumn("EVENT_START_TIME", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEVENT_START_TIME);
                this.columnEND_DATE = new System.Data.DataColumn("END_DATE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEND_DATE);
                this.columnEND_TIME = new System.Data.DataColumn("END_TIME", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEND_TIME);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivePpvEventsRow NewActivePpvEventsRow() {
                return ((ActivePpvEventsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ActivePpvEventsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ActivePpvEventsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActivePpvEventsRowChanged != null)) {
                    this.ActivePpvEventsRowChanged(this, new ActivePpvEventsRowChangeEvent(((ActivePpvEventsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActivePpvEventsRowChanging != null)) {
                    this.ActivePpvEventsRowChanging(this, new ActivePpvEventsRowChangeEvent(((ActivePpvEventsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActivePpvEventsRowDeleted != null)) {
                    this.ActivePpvEventsRowDeleted(this, new ActivePpvEventsRowChangeEvent(((ActivePpvEventsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActivePpvEventsRowDeleting != null)) {
                    this.ActivePpvEventsRowDeleting(this, new ActivePpvEventsRowChangeEvent(((ActivePpvEventsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActivePpvEventsRow(ActivePpvEventsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EquipmentSchema ds = new EquipmentSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActivePpvEventsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerEquipmentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSERIAL_NUMBER;
            
            private System.Data.DataColumn columnITEM_NUMBER;
            
            private System.Data.DataColumn columnPORT_TYPE;
            
            private System.Data.DataColumn columnEQUIPMENT_ADDRESS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerEquipmentDataTable() {
                this.TableName = "CustomerEquipment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerEquipmentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerEquipmentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SERIAL_NUMBERColumn {
                get {
                    return this.columnSERIAL_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ITEM_NUMBERColumn {
                get {
                    return this.columnITEM_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PORT_TYPEColumn {
                get {
                    return this.columnPORT_TYPE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EQUIPMENT_ADDRESSColumn {
                get {
                    return this.columnEQUIPMENT_ADDRESS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerEquipmentRow this[int index] {
                get {
                    return ((CustomerEquipmentRow)(this.Rows[index]));
                }
            }
            
            public event CustomerEquipmentRowChangeEventHandler CustomerEquipmentRowChanging;
            
            public event CustomerEquipmentRowChangeEventHandler CustomerEquipmentRowChanged;
            
            public event CustomerEquipmentRowChangeEventHandler CustomerEquipmentRowDeleting;
            
            public event CustomerEquipmentRowChangeEventHandler CustomerEquipmentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerEquipmentRow(CustomerEquipmentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerEquipmentRow AddCustomerEquipmentRow(string SERIAL_NUMBER, string ITEM_NUMBER, string PORT_TYPE, string EQUIPMENT_ADDRESS) {
                CustomerEquipmentRow rowCustomerEquipmentRow = ((CustomerEquipmentRow)(this.NewRow()));
                rowCustomerEquipmentRow.ItemArray = new object[] {
                        SERIAL_NUMBER,
                        ITEM_NUMBER,
                        PORT_TYPE,
                        EQUIPMENT_ADDRESS};
                this.Rows.Add(rowCustomerEquipmentRow);
                return rowCustomerEquipmentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CustomerEquipmentDataTable cln = ((CustomerEquipmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CustomerEquipmentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSERIAL_NUMBER = base.Columns["SERIAL_NUMBER"];
                this.columnITEM_NUMBER = base.Columns["ITEM_NUMBER"];
                this.columnPORT_TYPE = base.Columns["PORT_TYPE"];
                this.columnEQUIPMENT_ADDRESS = base.Columns["EQUIPMENT_ADDRESS"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSERIAL_NUMBER = new System.Data.DataColumn("SERIAL_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERIAL_NUMBER);
                this.columnITEM_NUMBER = new System.Data.DataColumn("ITEM_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_NUMBER);
                this.columnPORT_TYPE = new System.Data.DataColumn("PORT_TYPE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPORT_TYPE);
                this.columnEQUIPMENT_ADDRESS = new System.Data.DataColumn("EQUIPMENT_ADDRESS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEQUIPMENT_ADDRESS);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerEquipmentRow NewCustomerEquipmentRow() {
                return ((CustomerEquipmentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomerEquipmentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CustomerEquipmentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerEquipmentRowChanged != null)) {
                    this.CustomerEquipmentRowChanged(this, new CustomerEquipmentRowChangeEvent(((CustomerEquipmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerEquipmentRowChanging != null)) {
                    this.CustomerEquipmentRowChanging(this, new CustomerEquipmentRowChangeEvent(((CustomerEquipmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerEquipmentRowDeleted != null)) {
                    this.CustomerEquipmentRowDeleted(this, new CustomerEquipmentRowChangeEvent(((CustomerEquipmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerEquipmentRowDeleting != null)) {
                    this.CustomerEquipmentRowDeleting(this, new CustomerEquipmentRowChangeEvent(((CustomerEquipmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerEquipmentRow(CustomerEquipmentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EquipmentSchema ds = new EquipmentSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerEquipmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActivePpvEventsRow : System.Data.DataRow {
            
            private ActivePpvEventsDataTable tableActivePpvEvents;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActivePpvEventsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActivePpvEvents = ((ActivePpvEventsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERIAL_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableActivePpvEvents.SERIAL_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SERIAL_NUMBER\' in table \'ActivePpvEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivePpvEvents.SERIAL_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EVENT_TITLE {
                get {
                    try {
                        return ((string)(this[this.tableActivePpvEvents.EVENT_TITLEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EVENT_TITLE\' in table \'ActivePpvEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivePpvEvents.EVENT_TITLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EVENT_START_DATE {
                get {
                    try {
                        return ((decimal)(this[this.tableActivePpvEvents.EVENT_START_DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EVENT_START_DATE\' in table \'ActivePpvEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivePpvEvents.EVENT_START_DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EVENT_START_TIME {
                get {
                    try {
                        return ((decimal)(this[this.tableActivePpvEvents.EVENT_START_TIMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EVENT_START_TIME\' in table \'ActivePpvEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivePpvEvents.EVENT_START_TIMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal END_DATE {
                get {
                    try {
                        return ((decimal)(this[this.tableActivePpvEvents.END_DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'END_DATE\' in table \'ActivePpvEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivePpvEvents.END_DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal END_TIME {
                get {
                    try {
                        return ((decimal)(this[this.tableActivePpvEvents.END_TIMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'END_TIME\' in table \'ActivePpvEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivePpvEvents.END_TIMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERIAL_NUMBERNull() {
                return this.IsNull(this.tableActivePpvEvents.SERIAL_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERIAL_NUMBERNull() {
                this[this.tableActivePpvEvents.SERIAL_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEVENT_TITLENull() {
                return this.IsNull(this.tableActivePpvEvents.EVENT_TITLEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEVENT_TITLENull() {
                this[this.tableActivePpvEvents.EVENT_TITLEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEVENT_START_DATENull() {
                return this.IsNull(this.tableActivePpvEvents.EVENT_START_DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEVENT_START_DATENull() {
                this[this.tableActivePpvEvents.EVENT_START_DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEVENT_START_TIMENull() {
                return this.IsNull(this.tableActivePpvEvents.EVENT_START_TIMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEVENT_START_TIMENull() {
                this[this.tableActivePpvEvents.EVENT_START_TIMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEND_DATENull() {
                return this.IsNull(this.tableActivePpvEvents.END_DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEND_DATENull() {
                this[this.tableActivePpvEvents.END_DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEND_TIMENull() {
                return this.IsNull(this.tableActivePpvEvents.END_TIMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEND_TIMENull() {
                this[this.tableActivePpvEvents.END_TIMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerEquipmentRow : System.Data.DataRow {
            
            private CustomerEquipmentDataTable tableCustomerEquipment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerEquipmentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomerEquipment = ((CustomerEquipmentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERIAL_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCustomerEquipment.SERIAL_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SERIAL_NUMBER\' in table \'CustomerEquipment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerEquipment.SERIAL_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ITEM_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCustomerEquipment.ITEM_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ITEM_NUMBER\' in table \'CustomerEquipment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerEquipment.ITEM_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PORT_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableCustomerEquipment.PORT_TYPEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PORT_TYPE\' in table \'CustomerEquipment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerEquipment.PORT_TYPEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EQUIPMENT_ADDRESS {
                get {
                    try {
                        return ((string)(this[this.tableCustomerEquipment.EQUIPMENT_ADDRESSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EQUIPMENT_ADDRESS\' in table \'CustomerEquipment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerEquipment.EQUIPMENT_ADDRESSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERIAL_NUMBERNull() {
                return this.IsNull(this.tableCustomerEquipment.SERIAL_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERIAL_NUMBERNull() {
                this[this.tableCustomerEquipment.SERIAL_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEM_NUMBERNull() {
                return this.IsNull(this.tableCustomerEquipment.ITEM_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEM_NUMBERNull() {
                this[this.tableCustomerEquipment.ITEM_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPORT_TYPENull() {
                return this.IsNull(this.tableCustomerEquipment.PORT_TYPEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPORT_TYPENull() {
                this[this.tableCustomerEquipment.PORT_TYPEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEQUIPMENT_ADDRESSNull() {
                return this.IsNull(this.tableCustomerEquipment.EQUIPMENT_ADDRESSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEQUIPMENT_ADDRESSNull() {
                this[this.tableCustomerEquipment.EQUIPMENT_ADDRESSColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActivePpvEventsRowChangeEvent : System.EventArgs {
            
            private ActivePpvEventsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivePpvEventsRowChangeEvent(ActivePpvEventsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivePpvEventsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerEquipmentRowChangeEvent : System.EventArgs {
            
            private CustomerEquipmentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerEquipmentRowChangeEvent(CustomerEquipmentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerEquipmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591